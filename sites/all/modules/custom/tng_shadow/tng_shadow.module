<?php


// The debug via dpm statements is simple. Each function that will use a dpm will define 'tng_debug = 1'
// to use dpm statements and surround the dpm statements with :
//   if ($tng_debug == 1) {
//     dpm($e);
//   }
// Change 'tng_debug = 0' to turn off debugging in a function, and globally do a find and replace to turn them all on/off
// This is mainly due to the inconsistent use of global variables in php and no ability to use method overrides ala java.

/**
 * @param $date - given a date, find the difference between that data and today's date.
 * @return string - return the string in the format '2 years 1 month 3 days'
 *
 * the _date_diff function will return the data in an array with name/value pairs for 'y', 'm', 'd'
 */

function tng_date_difference_creator($date)
{
  $calc_date = _date_diff(strtotime($date), time());
  $years = $calc_date['y'];
  $months = $calc_date['m'];
  $days = $calc_date['d'];
  $date_string = '';
  if ($years > 1) {
    $date_string = $years . ' years ';
  } elseif ($years > 0) {
    $date_string = $years . ' year ';
  }
  if ($months > 1) {
    $date_string .= $months . ' months ';
  } elseif ($months > 0) {
    $date_string .= $months . ' month ';
  }
  if ($days > 1) {
    $date_string .= $days . ' days';
  } elseif ($days > 0) {
    $date_string .= $days . ' day';
  }
  return $date_string;
}


/**
 * @param $targetid - a target_id value
 *
 * tng_title_and_image_extractor - will load the node for the passed target_id and hand back an array
 *  of triplets of data:
 *    - thumbnail image of the referenced product
 *    - headline (or product name for products)
 *    - date of when product was introduced (a string like '3 months ago')
 *
 */
function tng_title_image_date_extractor($targetid, $language)
{
  $tng_debug =0;
  try {
    $title = 'title_field';
    $image = 'field_product_image';
    $creation_date = 'created';
    $results = array();
    $entity = node_load($targetid);
    $results[$title] = '';
    if (isset($entity->title_field[$language][0]['value'])) {
      $results[$title] .= $entity->title_field[$language][0]['value'] . '/';
    }
    $results[$title] .= $targetid;
    if (isset($entity->field_product_image[$language][0]['uri'])) {
      $results[$image] = $entity->field_product_image[$language][0]['uri'];
    }
    $date = $entity->created;
    $date = format_date($date, 'short');
    $results[$creation_date] = tng_date_difference_creator($date);
    return $results;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

/**
 * @param $targetid - a target_id value
 *
 * tng_manifest_extractor - will load the node for the passed target_id and hand back a json manifest
 *
 *
 */
function tng_manifest_extractor($targetid, $language)
{
  $tng_debug =0;
  try {
    if ($tng_debug == 1) {
      dpm('language passed to manifest extractor');
      dpm($language);
    }
    $learning_object_node = node_load($targetid);
    if (isset($learning_object_node->field_manifest[$language][0]['target_id'])) {
      $lo_tid = $learning_object_node->field_manifest[$language][0]['target_id'];
      $learning_object_manifest = node_load($lo_tid);
      // manifests are not language sensitive, so we are ok with using LANGUAGE_NONE here (we write them after all)
      $results = $learning_object_manifest->body[LANGUAGE_NONE][0]['value'];
      if ($tng_debug == 1) {
        dpm($results);
      }
      return $results;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


/**
 * @param $id = required parameter for creating an npFeature for NewPlayerV2
 * @param null $req = if there is a required css library, pass it in here, default is null
 * @param null $version = if there is a version number given, embed it here
 * @param null $timestamp = if there is an assigned date, use it, otherwise creation from current time.
 *
 * tng_npFeature_maker - given the required parameter $id, build a valid npFeature code chunk
 */
function tng_npFeature_maker($id, $class = NULL, $req = NULL, $version = NULL, $timestamp = NULL)
{
  $tng_debug =0;
  try {
    if (isset($id)) {
      if (!isset($version)) {
        $version = '0.0.1';
      }
      if (!isset($timestamp)) {
        $format_string = 'Y-M-D_h:m:s';
        $time_string = date($format_string);
      }
      $feature = '[ {';
      $feature .= '"type"' . ':' . '"npFeature"';
      $feature .= ',' . '"data"' . ': {' . '"id"' . ': ' . '"' . $id . '"';
      //NewPlayerV2 will bomb if it finds something it can't load and that thing is required, like a missing css file, for now don't add it
      $feature .= ',' . '"class"' . ': ' . '"' . $class . '"';
      $feature .= ',' . '"version"' . ': ' . '"' . $version . '"';
      $feature .= ',' . '"timestamp"' . ': ' . '"' . $time_string . '"';
      $feature .= '},';
      return $feature;
    } else {
      if ($tng_debug == 1) {
        dpm('No id passed to npFeature function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

/**
 * @param $id = required parameter for creating an npContent for NewPlayerV2
 * @param null $language = required parameter to set the language for the page content
 * @param null $title = set the page title
 * @param null $description = set the page description
 *
 * tng_npContent_maker - given the required parameter $id, build a valid npContent code chunk
 */
function tng_npContent_maker($id, $language, $title = NULL, $description = NULL)
{
  $tng_debug =0;
  try {
    if (isset($id) && isset($language)) {
      if (!isset($title)) {
        $title = '"Sample Manifest Content Title"';
      }
      if (!isset($description)) {
        $description = '"Sample presentation"';
      }
      $content = '"components": [ {';
      $content .= '"type"' . ':' . '"npContent"';
      $content .= ',' . '"data"' . ': {' . '"id"' . ': ' . '"' . $id . '"';
      $content .= ',' . '"language"' . ': ' . '"' . $language . '"';
      $content .= ',' . '"title"' . ': ' . '"' . $title . '"';
      $content .= ',' . '"description"' . ': ' . '"' . $description . ' "';
      $content .= '},';
      $content .= '"components": [ ';
      return $content;
    } else {
      if ($tng_debug == 1) {
        dpm('No id or language passed to npContent function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}


/**
 * @param $id = required parameter for creating an npPage for NewPlayerV2
 * @param null $parentid = set the parent id for a page relationship
 * @param null $title = set the page title
 * @param null $inmenu = if it's supposed to show in the npMenu
 * @param null $required = set the page description
 *
 * tng_npPageStart_maker - given the required parameter $id, build a valid npPage code chunk
 */
function tng_npPageStart_maker($id = null, $parentid = NULL, $title = NULL, $inmenu = NULL, $required = NULL, $instructional = NULL)
{
  $tng_debug =0;
  try {
      if (!isset($title)) {
        $title = '"Page Title"';
      }
      if (!isset($required)) {
        $required = 'false';
      }
      $page = '{';
      $page .= '"type"' . ':' . '"npPage"';
      $page .= ',' . '"data"' . ': {' ;
      $page .=  '"id"' . ': ' . '"' . $id . '"';
      if ($parentid) {
        $page .= ',' . '"parentId"' . ': ' . '"' . $parentid . '"';
      }
      if ($title) {
        $page .= ',' . '"title"' . ': ' . '"' . $title . '"';
      }
      if ($instructional) {
        $page .= ',' . '"instructional"' . ': ' . '"' . $instructional . '"';
      }
      if ($inmenu) {
        $page .= ',' . '"inMenu"' . ': ' . $inmenu;
      }
      if ($required) {
        $page .= ',' . '"required"' . ': ' . $required;
      }
      $page .= '}, ';
      $page .= '"components": [ ';
      return $page;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

/**
 * @return string pages can contain many different objects, like images, html, questions, answers, etc
 */
function tng_npPageEndMaker()
{
  return "] }";
}

/**
 * @param $id
 * @param null $menuitemstype
 * @return null|string
 */
function tng_npMenu_maker($id, $menuitemstype = NULL)
{
  $tng_debug =0;
  try {
    if (isset($id)) {
      if (!isset($menuitemstype)) {
        $menuitemstype = 'globalMenu';
      }
      $menu = '{';
      $menu .= '"type"' . ':' . '"npMenu"';
      $menu .= ',' . '"data"' . ': {' . '"id"' . ': ' . '"' . $id . '"';
      $menu .= ',' . '"items"' . ': [' . '"' . $menuitemstype . '" ]';
      $menu .= '} ';
      $menu .= '},';
      return $menu;
    } else {
      if ($tng_debug == 1) {
        dpm('No id passed to npMenu function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


/**
 * @param $link - the link that will be followed when the button is clicked, the label must be defined
 * @param null $type - optional type to seeuply to the data element
 * @param null $buttontitle - the title that will be placed on top of the button
 * @param null $class - the button class
 * @return null|string - button manifest chunk is returned (null if no link is given)
 */
function tng_npButton_maker($link, $type = NULL, $class = NULL, $buttontitle = NULL, $language = NULL)
{
  $tng_debug =0;
  try {

    if (strlen($buttontitle) == 0) {
      $buttontitle = tng_translate_next_button($language);
    }
    if (isset($link)) {
      $page = '{';
      $page .= '"type"' . ':' . '"npButton"';
      $page .= ',' . '"data"' . ': {' . '"link"' . ': ' . '"' . $link . '"';
      $page .= ',' . '"type"' . ': ' . '"' . $type . '"';
      $page .= ',' . '"class"' . ': ' . '"' . $class . '"';
      $page .= ',' . '"content"' . ': ' . '"' . $buttontitle . '"';
      $page .= '}, ';
      $page .= '"components"' . ': []';
      $page .= '}';
      return $page;
    } else {
      if ($tng_debug == 1) {
        dpm('No link passed to npButton function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

/**
 * @param null $required - set if you want to require a question to be answered
 * @param null $forced - the equivalent of a blocking question, must answer correctly to go to next question
 * @param null $type - radio or checkbox
 * @param null $difficulty - on a scale from 1 to 5, easy to difficult
 * @param $question_text - require the question to make a question
 * @param null $feedback_immediate - whether to respond more immediately to a question
 * @param null $feedback_correct - the default correct answer text, can be over-written by correct value in npAnswer
 * @param null $feedback_incorrect - the default incorrect answer text, can also be over-written by incorrect value in npAnswer
 * @return null|string
 */
function tng_npQuestion_maker($required = NULL, $forced = NULL, $type = NULL, $difficulty = NULL, $question_text, $feedback_immediate = NULL, $feedback_correct = NULL, $feedback_incorrect = NULL, $language = NULL, $question_image = NULL)
{
  $tng_debug =0;
  try {
    $submit_label = tng_translate_submit_button($language);
    $question_label = tng_translate_question_label($language);
    $answer_label = tng_translate_answers_label($language);

    if (isset($question_text)) {
      // we assume radio button versus checkbox if you don't supply a choice
      if (!isset($type)) {
        $type = 'checkbox';
      }
      if (isset($required)) {
        $req = 'true';
      } else {
        $req = 'false';
      }
      $question = '"type"' . ':' . '"npQuestion"';
      $question .= ',' . '"data"' . ': {';
      $question .= '"required"' . ': ' . $req;
      $question .= ',' . '"forced"' . ': ' . $forced;
      $question .= ',' . '"type"' . ': ' . '"' . $type . '"';
      $question .= ',' . '"difficulty"' . ': ' . '"' . $difficulty . '"';
      $question .= ',' . '"content"' . ': ' . json_encode($question_text);
      $question .= ',' . '"questionLabel"' . ': ' . '"' . $question_label . '"';
      $question .= ',' . '"answerLabel"' . ': ' . '"' . $answer_label . '"';
      $question .= ',' . '"submitLabel"' . ': ' . '"' . $submit_label . '"';
      $question .= ',' . '"questionImage"' . ': ' . '"' . $question_image . '"';
      $question .= ',' . '"feedback"' . ': {';
      $question .= '"immediate"' . ': ' .  $feedback_immediate ;
      $question .= ',' . '"correct"' . ': ' . '"' . $feedback_correct . '"';
      $question .= ',' . '"incorrect"' . ': ' . '"' . $feedback_incorrect . '"';
      $question .= '}';
      $question .= '}, ';
      $question .= '"components": [';
      return $question;
    } else {
      if ($tng_debug == 1) {
        dpm('No question passed to npQuestion function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

/**
 * @param null $language  - supply the language and we make a translated 'Question:' button text
 * @return string
 */
function tng_translate_question_label ($language = NULL)
{

  $question_label = 'Question:';

  switch ($language) {
    case "frca":  // French (Canadian)
      $question_label = 'Question:';
      break;
    case "fr":  // French (France)
      $question_label = 'Question:';
      break;
    case "es":  // Spain or Puerto Rico
      $question_label = 'Pregunta:';
      break;
    case "essp":  // Puerto Rico
      $question_label = 'Pregunta:';
      break;
    case "zhhans":  // Chinese (simplified)
      $question_label = '问题:';
      break;
    case "zhhant":  // Chinese (traditional)
      $question_label = '問題:';
      break;
    case "ko":  // Korea
      $question_label = '질문:';
      break;
    case "th":  // Thailand
      $question_label = 'คำถาม:';
      break;
    case "id":  // Indonesia
      $question_label = 'Pertanyaan:';
      break;
    case "ja":  // Japan
      $question_label = '質問:';
      break;
    case "nl":  // Netherland
      $question_label = 'Vraag';
      break;
    case "cs":  // Czech Republic
      $question_label = 'Otázky:';
      break;
    case "de":  // Germany
      $question_label = 'Frage:';
      break;
    case "el":  // Greece
      $question_label = 'Ερώτηση:';
      break;
    case "he":  // Israel
      $question_label = 'שאלה:';
      break;
    case "it":  // Italian
      $question_label = 'Domanda:';
      break;
    case "ar":  // Saudi Arabia
      $question_label = 'أسئلة:';
      break;
    case "da":  // Denmark
      $question_label = 'Spørgsmål:';
      break;
    case "sv":  // Sweden
      $question_label = 'Fråga:';
      break;
    case "nb":  // Norway
      $question_label = 'Spørsmål:';
      break;
    case "pl":  // Poland
      $question_label = 'Pytanie:';
      break;
    case "fi":  // Finland
      $question_label = 'Kysymys: ';
      break;
    case "lt":  // Lithuania
      $question_label = 'Klausimas:';
      break;
    case "lv":  // Latvia
      $question_label = 'jautājums:';
      break;
    case "ru": // Russian Federation
      $question_label = 'вопрос:';
      break;
    case "hu":  // Hungary
      $question_label = 'Kérdés:';
      break;
    case "tr":  // Turkey
      $question_label = 'Soru:';
      break;
    case "ro":  // Romania
      $question_label = 'Intrebare';
      break;
//    case "country_match":
//      $question_label = 'translated value for Question:';
//      break;
  }
  return $question_label;
}

/**
 * @param null $language  - supply the language and we make a translated 'submit' button text
 * @return string
 */
function tng_translate_answers_label ($language = NULL)
{
  // if language is not set, default to english

  // and also default to english 'Answers:'
  $answer_label = 'Answers:';

  // otherwise, if a language is given set it here
  switch ($language) {
    case "frca":  // French (Canadian)
      $answer_label = 'Réponses:';
      break;
    case "fr":  // French (France)
      $answer_label = 'Réponses:';
      break;
    case "es":  // Spain or Puerto Rico
      $answer_label = 'Respuestas:';
      break;
    case "essp":  // Puerto Rico
      $answer_label = 'Respuestas:';
      break;
    case "zhhans":  // Chinese (simplified)
      $answer_label = '答案:';
      break;
    case "zhhant":  // Chinese (traditional)
      $answer_label = '答案:';
      break;
    case "ko":  // Korea
      $answer_label = '정답:';
      break;
    case "th":  // Thailand
      $answer_label = 'คำตอบ:';
      break;
    case "id":  // Indonesia
      $answer_label = 'Jawaban:';
      break;
    case "ja":  // Japan
      $answer_label = '答え:';
      break;
    case "nl":  // Netherland
      $answer_label = 'Antwoord:';
      break;
    case "cs":  // Czech Republic
      $answer_label = 'Odpovědi:';
      break;
    case "de":  // Germany
      $answer_label = 'Antworten:';
      break;
    case "el":  // Greece
      $answer_label = 'Απαντήσεις:';
      break;
    case "he":  // Israel
      $answer_label = 'תשובה:';
      break;
    case "it":  // Italian
      $answer_label = 'Risposte:';
      break;
    case "ar":  // Saudi Arabia
      $answer_label = 'أجوبة:';
      break;
    case "da":  // Denmark
      $answer_label = 'Svar:';
      break;
    case "sv":  // Sweden
      $answer_label = 'Svar:';
      break;
    case "nb":  // Norway
      $answer_label = 'Svar:';
      break;
    case "pl":  // Poland
      $answer_label = 'Odpowiedź:';
      break;
    case "fi":  // Finland
      $answer_label = 'Vastaus:';
      break;
    case "lt":  // Lithuania
      $answer_label = 'Atsakymas:';
      break;
    case "lv":  // Latvia
      $answer_label = 'Atbildes:';
      break;
    case "ru": // Russian Federation
      $answer_label = 'ответы:';
      break;
    case "hu":  // Hungary
      $answer_label = 'Válasz:';
      break;
    case "tr":  // Turkey
      $answer_label = 'Cevaplar:';
      break;
    case "ro":  // Romania
      $answer_label = 'Raspuns:';
      break;
//    case "country_match":
//      $answer_label = 'translated value for Answers:';
//      break;
  }

  return $answer_label;
}

/**
 * @param null $language  - supply the language and we make a translated 'submit' button text
 * @return string
 */
function tng_translate_submit_button ($language = NULL)
{

  $submit_label = 'Submit';

  // otherwise, if a language is given set it here
  switch ($language) {
    case "frca":  // French (Canadian)
      $submit_label = 'Valider';
      break;
    case "fr":  // French (France)
      $submit_label = 'Valider';
      break;
    case "es":  // Spain or Puerto Rico
      $submit_label = 'Presentar';
      break;
    case "essp":  // Puerto Rico
      $submit_label = 'Presentar';
      break;
    case "zhhans":  // Chinese (simplified)
      $submit_label = '提交';
      break;
    case "zhhant":  // Chinese (traditional)
      $submit_label = '提交';
      break;
    case "ko":  // Korea
      $submit_label = '제출';
      break;
    case "th":  // Thailand
      $submit_label = 'นำเสนอ';
      break;
    case "id":  // Indonesia
      $submit_label = 'Menyerahkan';
      break;
    case "ja":  // Japan
      $submit_label = '提出します';
      break;
    case "nl":  // Netherlands
      $submit_label = 'Voorleggen';
      break;
    case "cs":  // Czech Republic
      $submit_label = 'Předložit';
      break;
    case "de":  // Germany
      $submit_label = 'Einreichen';
      break;
    case "el":  // Greece
      $submit_label = 'Υποβολή';
      break;
    case "he":  // Israel
      $submit_label = 'שלח';
      break;
    case "it":  // Italian
      $submit_label = 'Presentare';
      break;
    case "ar":  // Saudi Arabia
      $submit_label = 'عرض';
      break;
    case "da":  // Denmark
      $submit_label = 'Indsend';
      break;
    case "sv":  // Sweden
      $submit_label = 'Skicka in';
      break;
    case "nb":  // Norway
      $submit_label = 'Send inn';
      break;
    case "pl":  // Poland
      $submit_label = 'Zatwierdź';
      break;
    case "fi":  // Finland
      $submit_label = 'Esittää';
      break;
    case "lt":  // Lithuania
      $submit_label = 'Pateikti';
      break;
    case "lv":  // Latvia
      $submit_label = 'Iesniegt';
      break;
    case "ru": // Russian Federation
      $submit_label = 'Отправить';
      break;
    case "hu":  // Hungary
      $submit_label = 'Küldés';
      break;
    case "tr":  // Turkey
      $submit_label = 'Gönder';
      break;
    case "ro":  // Romania
      $submit_label = 'Trimite';
      break;
//    case "country_match":
//      $submit_label = 'translated value for Submit';
//      break;
  }

  return $submit_label;
}

/**
 * @param null $language - supply the language and we make a translated 'next' button text
 * @return string
 * todo: remove code based solution to the excel spreadsheet --> json method
 */
function tng_translate_next_button ($language = NULL)
{

  $next_label = 'Next';

  // otherwise, if a language is given set it here
  switch ($language) {
    case "frca":  // French (Canadian)
      $next_label = 'Suivant';
      break;
    case "fr":  // French (France)
      $next_label = 'Suivant';
      break;
    case "es":  // Spain or Puerto Rico
      $next_label = 'Siguiente';
      break;
    case "essp":  // Puerto Rico
      $next_label = 'Siguiente';
      break;
    case "zhhans":  // Chinese (simplified)
      $next_label = '下一个';
      break;
    case "zhhant":  // Chinese (traditional)
      $next_label = '下一個';
      break;
    case "ko":  // Korea
      $next_label = 'Next';
      break;
    case "th":  // Thailand
      $next_label = 'ถัดไป';
      break;
    case "id":  // Indonesia
      $next_label = 'Lanjut';
      break;
    case "ja":  // Japan
      $next_label = '次へ';
      break;
    case "nl":  // Netherlands
      $next_label = 'Volgende';
      break;
    case "cs":  // Czech Republic
      $next_label = 'Další';
      break;
    case "de":  // Germany
      $next_label = 'Weiter';
      break;
    case "el":  // Greece
      $next_label = 'Επόμενο';
      break;
    case "he":  // Israel
      $next_label = 'הבא';
      break;
    case "it":  // Italian
      $next_label = 'Prossimo';
      break;
    case "ar":  // Saudi Arabia
      $next_label = 'التالي';
      break;
    case "da":  // Denmark
      $next_label = 'Næste';
      break;
    case "sv":  // Sweden
      $next_label = 'Nästa';
      break;
    case "nb":  // Norway
      $next_label = 'Neste';
      break;
    case "pl":  // Poland
      $next_label = 'Następny';
      break;
    case "fi":  // Finland
      $next_label = 'Seuraava';
      break;
    case "lt":  // Lithuania
      $next_label = 'Sekantis';
      break;
    case "lv":  // Latvia
      $next_label = 'Nākošais';
      break;
    case "ru": // Russian Federation
      $next_label = 'далее';
      break;
    case "hu":  // Hungary
      $next_label = 'Következő';
      break;
    case "tr":  // Turkey
      $next_label = 'Sonraki';
      break;
    case "ro":  // Romania
      $next_label = 'Urmatorul';
      break;
//    case "country_match":
//      $next_label = 'translated value for Next';
//      break;
  }

  return $next_label;
}

/**
 * @param $label - the answer text passed in
 * @param $correct - whether this answer is correct or not.
 * @param null $feedback_correct - will over-write default correct answer from npQuestion
 * @param null $feedback_incorrect - will over-write default incorrect answer from npQuestion
 * @return null|string
 */
function tng_npAnswer_maker($label, $correct, $feedback_correct = NULL, $feedback_incorrect = NULL)
{
  $tng_debug =0;
  try {
    if (isset($label)) {
      $answer = '{';
      $answer .= '"type"' . ':' . '"npAnswer"';
      $answer .= ',' . '"data"' . ': {';
      $answer .= '"label"' . ': ' . '"' . $label . '"';
      $answer .= ',' . '"correct"' . ': ' . $correct;
      $answer .= ',' . '"feedback"' . ': {';
      //$answer = $answer . ',' .     '"immediate"' . ': ' .  $feedback_immediate ;
      if (!empty($feedback_correct)) {
        $answer .= '"correct"' . ': ' . '"' . $feedback_correct . '"';
      } else {
        if ($tng_debug == 1) {
          dpm('no correct answer found');
        }
      }
      // if both correct and incorrect values use a comma between them, otherwise not
      if (!empty($feedback_incorrect) && !empty($feedback_correct)) {
        $answer .= ',' . '"incorrect"' . ': ' . '"' . $feedback_incorrect . '"';
      } elseif (!empty($feedback_incorrect)) {
        $answer .= '"incorrect"' . ': ' . '"' . $feedback_incorrect . '"';
      }
      $answer .= '}';
      $answer .= '}';
      $answer .= '},';
      return $answer;
    } else {
      if ($tng_debug == 1) {
        dpm('No answer passed to npAnswer function!');
      }
      return null;
    }
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

/**
 * @param null $class = define a class for the HTML element, for example 'h3 sans-head'
 * @param null $data_ng_click = define a class for angular hook
 * @param null $xplugin = np-expandable will do accordion functionality
 * @param null $data -collapse = state of collapsed or not element
 * @param null $content = typically the raw HTML for the <div>
 * @return null|string = returns an NewPlayerV2 string of nice json for an HTML element
 * @open_component FALSE = pass TRUE to leave the component nesting openn (say for background padding)
 */
function tng_npHTML_basic_maker($id = NULL, $class = NULL, $data_ng_click = NULL, $xplugin = NULL, $data_collapse = NULL, $content = NULL, $link = NULL, $open_component = FALSE)
{
  $tng_debug =0;
  try {
    $content = str_replace('"', '\"', $content);
    $html = '{' . '"type"' . ':' . '"npHTML"';
    $html .= ',' . '"data"' . ': {';
    if ($id) {
      $html .= '"id"' . ': ' . '"' . $id . '"';
    }
    if ($class) {
      $html .= '"class"' . ': ' . '"' . $class . '"';
    }
    if ($data_ng_click) {
      $html .= ',' . '"data-ng:click"' . ': ' . '"' . $data_ng_click . '"';
    }
    if ($xplugin) {
      $html .= ',' . '"xplugin"' . ': ' . '"' . $xplugin . '"';
    }
    if ($data_collapse) {
      $html .= ',' . '"data-collapse"' . ': ' . '"' . $data_collapse . '"';
    }
    if ($content) {
      $html .= ',' . '"content"' . ': ' . '"' . $content . '"';
    }
    if ($link) {
      $html .= ',' . '"link"' . ': ' . '"' . $link . '"';
    }
    $html .= '},'; // matches data line
    // if the component should be left open pass TRUE for the variable
    if ($open_component == TRUE) {
      $html .= '"components"' . ': [';
    } else {
      $html .= '"components"' . ': [ ]';
      $html .= '}, '; // matches data line
    }
    return $html;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

/**
 * @param $id = div id (for data, not header id) used for css styling later
 * @param null $class = define a class for the HTML element, for example 'field-label'
 * @param null $headerlabel = each header section needs a label to style, slightly confusing it is the 'content' of the header
 * @param null $content = typically the raw HTML for the <div>
 * @return null|string = returns an NewPlayerV2 string of nice json for an HTML element
 */
function tng_npHTML_maker($id_one = null, $class_one = NULL, $data_ng = null, $xplugin = null, $content_one, $id_two = NULL, $class_two = null, $data_collapse = null, $content_two = NULL)
{
  $tng_debug =0;
  try {
    $content_one = str_replace('"', '\"', $content_one);
    $content_two = str_replace('"', '\"', $content_two);

    $html = '{' . '"type"' . ':' . '"npHTML"';
    $html .= ',' . '"data"' . ': {';
    $html .= '"id"' . ': ' . '"' . $id_one . '"';
    $html .= ',' . '"class"' . ': ' . '"' . $class_one . '"';
    $html .= ',' . '"data-ng:click"' . ': ' . '"' . $data_ng . '"';
    $html .= ',' . '"xplugin"' . ': ' . '"' . $xplugin . '"';
    $html .= ',' . '"content"' . ': ' . '"' . $content_one . '"';
    $html .= '},'; // matches data line
    $html .= '"components"' . ': [ {';
    $html .= '"type"' . ':' . '"npHTML"';
    $html .= ',' . '"data"' . ': {';
    $html .= '"id"' . ': ' . '"' . $id_two . '"';
    $html .= ',' . '"class"' . ': ' . '"' . $class_two . '"';
    $html .= ',' . '"data-collapse"' . ': ' . '"' . $data_collapse . '"';
    $html .= ',' . '"content"' . ': ' . '"' . $content_two . '"';
    $html .= '}, '; // matches data line
    $html .= '"components": []';
    $html .= '} ] },'; // matches components line
    return $html;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

/**
 * @param null $class = define a class for the HTML element, for example 'h3 sans-head'
 * @param null $columns = pass the number of columns to create
 * @param null $open_component = pass TRUE to leave the component nesting open
 * @return null|string = returns an NewPlayerV2 string of nice json for an HTML element
 */
function tng_npColumn_maker($class = NULL, $columns = NULL, $open_component = FALSE)
{
  $tng_debug =0;
  try {
    $html = '{' . '"type"' . ':' . '"npColumn"';
    $html .= ',' . '"data"' . ': {';
    $html .= '"class"' . ': ' . '"' . $class . '"';
    $html .= ',' . '"cols"' . ': ' . '"' . $columns . '"';
    $html .= '},'; // matches data line
    // if the component should be left open pass TRUE for the variable
    if ($open_component) {
      $html .= '"components"' . ': [';
    } else {
      $html .= '"components"' . ': [ ]';
      $html .= '}, '; // matches data line
    }
    return $html;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

/**
 * @param $src - the string for the image
 * @param $class - optional class to style with
 * @param $alt - optional alt text for image
 * @return null|string
 */
function tng_npImage_maker($id = NULL, $src = NULL, $class = NULL, $alt = NULL)
{
  $tng_debug =0;
  //guard against bad image data and short circuit 'assets/' to '' to return a harmless npImage link
  if (!(strlen($src) > 8)) {
    $src = '';
  }
  try {
    $image = '{' . '"type"' . ':' . '"npImage"';
    $image .= ',' . '"data"' . ': {' . '"src"' . ': ' . '"' . $src . '"';
    $image .= ',' . '"id"' . ': ' . '"' . $id . '"';
    $image .= ',' . '"class"' . ': ' . '"' . $class . '"';
    $image .= ',' . '"alt"' . ': ' . '"' . $alt . '"';
    $image .= '}, '; // matches data line
    $image .= '"components": [ ]';
    $image .= '}'; // matches components line
    return $image;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }

}

function tng_npHotspot_maker($id = NULL, $class = NULL, $req = NULL, $feedback = NULL)
{
  $tng_debug =0;
  try {
    $hotspot = '{' . '"type"' . ':' . '"npHotspot"';
    $hotspot .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    $hotspot .= ',' . '"class"' . ':' . '"' . $class . '"';
    $hotspot .= ',' . '"req"' . ':' . '[' . $req . ']';
    $hotspot .= ',' . '"hotspotButtons"' . ':' . '[';
    return $hotspot;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_hotspot_button_maker($class = NULL, $feedback = NULL, $image = NULL)
{
  $tng_debug =0;
  try {
    $hotspotbutton = '{';
    $hotspotbutton .= '"class"' . ':' . '"' . $class . '"';
    $hotspotbutton .= ',' . '"feedback"' . ':' . '"' . $feedback . '"';
    $hotspotbutton .= ',' . '"image"' . ':' . '"' . $image . '"';
    $hotspotbutton .= '},';
    return $hotspotbutton;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npHotspot_closer($feedback = NULL, $image = NULL)
{
  $tng_debug =0;
  try {
    $hotspotclose = '],' . '"feedback"' . ':' . '"' . $feedback . '"';
    $hotspotclose .= ',' . '"image"' . ":" . '"' . $image . '"';
    $hotspotclose .= '},' . '"components"' . ':' . '[]';
    $hotspotclose .= '}';
    return $hotspotclose;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npDragAndSelect_maker($id = NULL, $class = NULL, $positive_feedback = NULL, $negative_feedback = NULL, $required = NULL, $req = NULL, $language = NULL, $image = NULL)
{
  $tng_debug =0;
  try {

    $submit_label = tng_translate_submit_button($language);
    $draganselect = '{' . '"type"' . ':' . '"npDragAndDropSelect"';
    $draganselect .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($class) {
      $draganselect .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    if ($positive_feedback) {
      $draganselect .= ',' . '"positiveFeedback"' . ':' . '"' . $positive_feedback . '"';
    }
    if ($image) {
      $draganselect .= ',' . '"image"' . ':' . '"' . $image . '"';
    }
    if ($negative_feedback) {
      $draganselect .= ',' . '"negativeFeedback"' . ':' . '"' . $negative_feedback . '"';
    }
    if ($submit_label) {
      $draganselect .= ',' . '"submitLabel"' . ':' . '"' . $submit_label . '"';
    }
    if ($required) {
      $draganselect .= ',' . '"required"' . ':' .  $required ;
    }
    $draganselect .= ',' . '"req"' . ':' . '[' . $req . ']';
    $draganselect .= ',' . '"draggableButtons"' . ':' . '[';
    return $draganselect;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npDragAndDropMatch_maker($id = NULL, $class = NULL, $positive_feedback = NULL, $negative_feedback = NULL, $req = NULL)
{
  $tng_debug =0;
  try {
    $draganselect = '{' . '"type"' . ':' . '"npDragAndDropMatch"';
    $draganselect .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($class) {
      $draganselect .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    if ($positive_feedback) {
      $draganselect .= ',' . '"positiveFeedback"' . ':' . '"' . $positive_feedback . '"';
    }
    if ($negative_feedback) {
      $draganselect .= ',' . '"negativeFeedback"' . ':' . '"' . $negative_feedback . '"';
    }
    $draganselect .= ',' . '"req"' . ':' . '[' . $req . ']';
    $draganselect .= ',' . '"draggableButtons"' . ':' . '[';
    return $draganselect;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npDragAndMatchPriority_maker($id = NULL, $class = NULL, $positive_feedback = NULL, $negative_feedback = NULL, $req = NULL)
{
  $tng_debug =0;
  try {
    $dragandrop = '{' . '"type"' . ':' . '"npDragAndDropPrioritize"';
    $dragandrop .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($class) {
      $dragandrop .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    if ($positive_feedback) {
      $dragandrop .= ',' . '"positiveFeedback"' . ':' . '"' . $positive_feedback . '"';
    }
    if ($negative_feedback) {
      $dragandrop .= ',' . '"negativeFeedback"' . ':' . '"' . $negative_feedback . '"';
    }
    $dragandrop .= ',' . '"req"' . ':' . '[' . $req . ']';
    $dragandrop .= ',' . '"draggableButtons"' . ':' . '[';
    return $dragandrop;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npReveal_maker($id = NULL, $class = NULL)
{
  $tng_debug =0;
  try {
    $reveal = '{' . '"type"' . ':' . '"npReveal"';
    $reveal .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($class) {
      $reveal .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    $reveal .= '},';
    $reveal .= '"revealItems"' . ': [';
    return $reveal;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npRevealItem_maker($id = NULL, $heading = NULL, $content = NULL, $buttonImage = NULL, $buttonAltText = NULL, $comp_type = NULL, $comp_id = NULL, $comp_src = NULL, $comp_alt = NULL, $comp_baseURL = NULL, $comp_types = NULL)
{
  $tng_debug =0;
  try {
    $withoutExt = preg_replace('/\\.[^.\\s]{3,4}$/', '', $comp_baseURL);

    $reveal = '{';
    if ($id) {
      $reveal .= '"id"' . ':' . '"' . $id . '"';
    }
    if ($heading) {
      $reveal .= ',' . '"heading"' . ':' . '"' . $heading . '"';
    }
    if ($content) {
      $reveal .= ',' . '"content"' . ':' . json_encode($content);
    }
    if ($buttonImage) {
      $reveal .= ',' . '"buttonImage"' . ':' . '"' . $buttonImage . '"';
    }
    if ($buttonAltText) {
      $reveal .= ',' . '"buttonAltText"' . ':' . '"' . $buttonAltText . '"';
    }
    $reveal .= ',' . '"components"' . ': [';
    $reveal .= '{';
    if ($comp_type) {
      $reveal .= '"type"' . ':' . '"' . $comp_type . '"';
    }
    $reveal .= ',' . '"data":' . '{';
    if ($comp_id) {
      $reveal .= '"id"' . ':' . '"' . $comp_id . '"';
    }
    if ($comp_src) {
      $reveal .= '"src"' . ':' . '"' . $comp_src . '"';
    }
    if ($comp_alt) {
      $reveal .= ',' . '"alt"' . ':' . '"' . $comp_alt . '"';
    }
    if ($comp_baseURL) {
      $reveal .= '"baseURL"' . ':' . '"' . $withoutExt . '"';
    }
    if ($comp_types) {
      $reveal .= ',' . '"types"' . ':' . '["' . $comp_types . '"]';
    }
    $reveal .= '},';
    $reveal .= '"components"' . ':' . '[]';
    $reveal .= '} ] },';
    return $reveal;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npFlashCard_maker($id = NULL, $class = NULL)
{
  $tng_debug =0;
  try {
    $flashcard = '{' . '"type"' . ':' . '"npFlashCards"';
    $flashcard .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($class) {
      $flashcard .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    $flashcard .= '},';
    $flashcard .= '"flashCards"' . ': [';
    return $flashcard;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npFlashCardItem_maker($title = NULL, $contentFront = NULL, $contentBack = NULL)
{
  $tng_debug =0;
  try {
    $flashcard = '{';
    if ($title) {
      $flashcard .= '"title"' . ':' . '"' . $title . '"';
    }
    if ($contentFront) {
      $flashcard .= '"contentFront"' . ':' . '"' . $contentFront . '"';
    }
    if ($contentBack) {
      $flashcard .= ',' . '"contentBack"' . ':' . '"' . $contentBack . '"';
    }
    $flashcard .= '},';
    return $flashcard;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npQuiz_maker($id = NULL, $type = NULL, $assessed = NULL, $questions = NULL, $passPercentage = NULL, $forced = null, $randomized = null, $required = null)
{
  $tng_debug =0;
  try {
    $quiz = '{' . '"type"' . ':' . '"npQuiz"';
    $quiz .= ',' . '"data"' . ': {' . '"id"' . ":" . '"' . $id . '"';
    if ($type) {
      $quiz .= ',' . '"type"' . ':' . '"' . $type . '"';
    }
    if ($assessed) {
      $quiz .= ',' . '"assessed"' . ':' . '"' . $assessed . '"';
    }
    if ($questions) {
      $quiz .= ',' . '"questions"' . ':' . '"' . $questions . '"';
    }
    if ($passPercentage) {
      $quiz .= ',' . '"percentage"' . ':' . '"' . $passPercentage . '"';
    }
    if ($forced) {
      $quiz .= ',' . '"forced"' . ':' . '"' . $forced . '"';
    }
    if ($randomized) {
      $quiz .= ',' . '"randomized"' . ':' . '"' . $randomized . '"';
    }
    if ($required) {
      $quiz .= ',' . '"required"' . ':' . '"' . $required . '"';
    }
    $quiz .= '},';
    $quiz .= '"components"' . ': [';
    return $quiz;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npTrivia_maker($required = NULL, $forced = NULL, $difficulty = NULL, $content = NULL, $immediate = NULL, $correct = NULL, $incorrect = NULL)
{
  $tng_debug =0;
  try {
    $quiz = '{' . '"type"' . ':' . '"npPage"';
    $quiz .= ',' .      '"data"' . ':' . '{';
    $quiz .= '},';
    $quiz .= '"components"' . ':' . '[';
    $quiz .= '{' . '"type"' . ':' . '"npTrivia"';
    $quiz .= ',' . '"data"' . ': {' . '"required"' . ":"  . $required ;
    if ($forced) {
      $quiz .= ',' . '"forced"' . ':' .  $forced ;
    }
    if ($difficulty) {
      $quiz .= ',' . '"difficulty"' . ':'  . $difficulty ;
    }
    if ($content) {
      $quiz .= ',' . '"content"' . ':' . '"' . $content . '"';
    }
    $quiz .= ',' . '"feedback"' . ':' . '{'; //  . $passPercentage . '"';
    if ($immediate) {
      $quiz .= '"immediate"' . ':' . $immediate ;
    }
    if ($correct) {
      $quiz .= ',' . '"correct"' . ':' . '"' . $correct . '"';
    }
    if ($incorrect) {
      $quiz .= ',' . '"incorrect"' . ':' . '"' . $incorrect . '"';
    }
    $quiz .= '}'; // close the feedback
    $quiz .= '},'; //close the data
    $quiz .= '"components"' . ': [';
    return $quiz;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npAsResult_maker($pass = null, $fail = null, $pass_text = null, $perfect_text = null)
{
  $tng_debug =0;
  try {
    $quiz = '{' . '"type"' . ':' . '"npPage"';
    $quiz .= ',' .      '"data"' . ':' . '{';
    $quiz .= '},';
    $quiz .= '"components"' . ':' . '[';
    $quiz .= '{' . '"type"' . ':' . '"npAsResult"';
    $quiz .= ',' . '"id"' . ':' . '"summary"';
    $quiz .= ',' . '"data"' . ': {' . '"feedback"' . ': {' ;
    if ($pass) {
      $quiz .= '"pass"' . ':' . '"' . $pass . '"';
    } else {
      $quiz .= '"pass"' . ':' . '"You\'ve completed this topic! You scored :USERSCORE:%"';
    }
    if ($fail) {
      $quiz .= ',' . '"fail"' . ':' . '"' . $fail .  '"}';
    } else {
      $quiz .= ',' . '"fail"' . ':' . '"You scored :USERSCORE:%. Consider going back and reviewing the material again."}';
    }
    $quiz .= ',' . '"achievements":[{"score":0.8';
    $quiz .= ',' . '"compare":"gte"';
    if ($pass_text) {
      $quiz .= ',' . '"content":' . '"' . $pass_text . '"}';
    } else {
      $quiz .= ',' . '"content":" "}';
    }
    $quiz .= ',' . '{"score":1';
    $quiz .= ',' . '"compare":"eq"';
    if ($perfect_text) {
      $quiz .= ',' . '"content":' . '"' . $perfect_text . '"}]}}]}';
    } else {
      $quiz .= ',' . '"content":" "}]}}]}';
    }
    return $quiz;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}

function tng_npMatch_maker($id = NULL, $difficulty = NULL, $content = NULL, $immediate = NULL, $correct = NULL, $incorrect = NULL)
{
  $tng_debug =0;
  try {
    $match = '{' . '"type"' . ':' . '"npMatch"';
    $match .= ',' . '"data"' . ': {';
    if ($difficulty) {
      $match .= '"id"' . ':' . '"' . $id . '"';
    }
    if ($difficulty) {
      $match .= ',' . '"difficulty"' . ':' . $difficulty;
    }
    if ($content) {
      $match .= ',' . '"content"' . ':' . '"' . $content . '"';
    }
    if ($immediate) {
      $match .= ',' . '"immediate"' . ':' . $immediate;
    }
    if ($correct) {
      $match .= ',' . '"correct"' . ':' . '"' . $correct . '"';
    }
    if ($incorrect) {
      $match .= ',' . '"incorrect"' . ':' . '"' . $incorrect . '"';
    }
    $match .= '} },';
    $match .= '"components"' . ': [';
    return $match;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npMatchRow_maker($title = NULL, $position = NULL)
{
  $tng_debug =0;
  try {
    $match = '{';
    $match .= '"type"' . ':' . '"npMatchRow"';
    $match .= ',' . '"data"' . ':' . '{';
    if ($position) {
      $match .= '"position"' . ':' . '"' . $position . '"';
    }
    $match .= '},';
    $match .= '"components"' . ':' . '[';
    return $match;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npMatchRowAnswer_maker($type = NULL, $label = NULL, $correct = NULL)
{
  $tng_debug =0;
  try {
    $match = '{';
    if ($type) {
      $match .= '"type"' . ':' . '"' . $type . '"';
    }
    $match .= ',' . '"data"' . ':' . '{';
    if ($label) {
      $match .= '"label"' . ':' . '"' . $label . '"';
    }
    if ($correct >= 0) {
      $match = $match . ',' . '"correct"' . ':' . $correct;
    }
    $match .= '},';
    $match .= '"components"' . ':' . '[]';
    $match .= '},';
    return $match;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_dragdrop_button_maker($id = NULL, $class = NULL, $feedback = NULL, $content = NULL, $image = NULL, $matching_content = NULL, $matching_image = NULL)
{
  $tng_debug =0;
  try {
    $dragdropbutton = '{';
    if ($id) {
      $dragdropbutton .= '"id"' . ':' . '"' . $id . '"';
    }
    if ($class) {
      $dragdropbutton .= ',' . '"class"' . ':' . '"' . $class . '"';
    }
    if ($feedback) {
      $dragdropbutton .= ',' . '"feedback"' . ':' . '"' . $feedback . '"';
    }
    $dragdropbutton .= '"content"' . ':' . '"' . $content . '"';
    $dragdropbutton .= ',' . '"image"' . ':' . '"' . $image . '"';
    $dragdropbutton .= ',' . '"matchingContent"' . ':' . '"' . $matching_content . '"';
    $dragdropbutton .= ',' . '"matchingImage"' . ':' . '"' . $matching_image . '"';
    $dragdropbutton .= '},';
    return $dragdropbutton;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_dragselect_button_maker($id = NULL, $class = NULL, $select = NULL, $content = NULL, $image = NULL, $matching_content = NULL, $matching_image = NULL)
{
  $tng_debug =0;
  try {
    $dragselectbutton = '{';
    if ($id) {
      $dragselectbutton .= '"id"' . ':' . '"' . $id . '"';
    }
    if ($class) {
      $dragselectbutton .= '"class"' . ':' . '"' . $class . '"';
    }
    if ($select) {
      $dragselectbutton .= '"select"' . ':' . '"' . $select . '"';
    }
    $dragselectbutton .= ',' . '"content"' . ':' . '"' . $content . '"';
    $dragselectbutton .= ',' . '"image"' . ':' . '"' . $image . '"';
    $dragselectbutton .= ',' . '"matchingContent"' . ':' . '"' . $matching_content . '"';
    $dragselectbutton .= ',' . '"matchingImage"' . ':' . '"' . $matching_image . '"';
    $dragselectbutton .= '},';
    return $dragselectbutton;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npDragAndDrop_closer($feedback = NULL, $image = NULL)
{
  $tng_debug =0;
  try {
    $hotspotclose = '],' . '"feedback"' . ':' . '"' . $feedback . '"';
    $hotspotclose .= ',' . '"image"' . ":" . '"' . $image . '"';
    $hotspotclose .= '},' . '"components"' . ':' . '[]';
    $hotspotclose .= '}';
    return $hotspotclose;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


function tng_npList_maker($id = NULL, $class = NULL, $data_ng = NULL, $heading = NULL, $content = NULL,
                          $component_type = NULL, $component_id = NULL, $component_src = NULL,
                          $component_alt = NULL, $data_poster = NULL, $data_baseurl = NULL, $data_types = NULL)
{
  $tng_debug =0;

  try {
    $withoutExt = preg_replace('/\\.[^.\\s]{3,4}$/', '', $data_baseurl);
    $list = '{' . '"type"' . ':' . '"npList"';
    $list .= ',' . '"data"' . ': {';
    if ($id) {
      $list .= '"id"' . ':' . '"' . $id . '"';
    }
    if ($class) {
      $list .= '"class"' . ':' . '"' . $class . '"';
    }
    if ($data_ng) {
      $list .= ',' . '"data-ng:wrap"' . ':' . '"' . $data_ng . '"';
    }
    if ($heading) {
      $list .= ',' . '"heading"' . ':' . '"' . $heading . '"';
    }
    if ($content) {
      $list .= ',' . '"content"' . ':' . '"' . $content . '"';
    }
    $list .= '},';
    $list .= '"components"' . ':' . '[';
    $list .= '{';
    if ($component_type) {
      $list .= '"type"' . ':' . '"' . $component_type . '"';
      $list .= ',         "data"' . ': {';
      if ($component_id) {
        $list .= '"id"' . ':' . '"' . $component_id . '"';
      }
      if ($component_src) {
        $list .= '             "src"' . ':' . '"' . $component_src . '"';
      }
      if ($component_alt) {
        $list .= ',            "alt"' . ':' . '"' . $component_alt . '"';
      }
      if ($data_poster) {
        $list .= '            "poster"' . ':' . '"' . $data_poster . '"';
      }
      if ($data_baseurl) {
        $list .= '            "baseURL"' . ':' . '"../' . $withoutExt . '"';
      }
      if ($data_baseurl) {
        $list .= ',            "types"' . ':' . '["' . $data_types . '"]';
      }
      $list .= '},';
      $list .= '"components"' . ':' . '[]';
      $list .= '}';
      $list .= ']';
      $list .= '},';
    } else {
      $list = rtrim($list, '{ ');
      $list .= '] },';
    }
    return $list;
  } catch (exception $e) {
    if ($tng_debug == 1) {
      dpm($e);
    }
  }
}


/**
 * @return string - when we create manifest objects we need to finish things with proper entity closing } and ]
 */
function tng_npPageContentFeatureCleanup()
{
  $cleanup = '] '; // close the component brace started before the npPage
  $cleanup .= '} '; // close the component brace started before the npContent
  $cleanup .= '] '; // close the component bracket started before the npContent
  $cleanup .= '} '; // close the most outer curly brace started before the npFeature
  $cleanup .= ']'; // close the most outer brace started before the npFeature
  return $cleanup;
}

/**
 * @return string - when we create manifest objects we need to finish things with proper entity closing } and ]
 */
function tng_npPageCleanup()
{
  $cleanup = '] '; // close the component started in the npPage
  $cleanup .= '} '; // close the curly started before the npPage
  return $cleanup;
}

/**
 * @param $language_key - the key to create our ISO 639-1 country and language codes, new languages should
 * be introduced here. the default language is 'en' if we can't figure out the key.
 *
 * @return array the $manifest_language returned has the language-country in the 0th element and the content line in the 1st element
 */
function make_language_strings($language_key)
{
  $country_only = '';
  $language_only = substr($language_key, 0);

  if ($language_key == LANGUAGE_NONE) {
    $manifest_language[] = 'en';
    $manifest_language[] = 'content_' . 'en';
  }
  if (strlen($language_key) > 2) {
    $country_only = strtoupper(substr($language_key, 2));
    $manifest_language[] = $language_only;
    $manifest_language[] = 'content_' . $language_only . '-' . $country_only;

  } else {
    $manifest_language[] = $language_only;
    $manifest_language[] = 'content_' . $language_only;
  }
  return $manifest_language;
}


function tng_value_from_pair($string)
{
  $q = explode('~', $string);
  $quest = trim($q[1], ' "');
  return $quest;
}


/**
 * @param $path - the path is the base path of an image, currently hi-res but will be a thumbnail image later
 * @param $csv_fields - the triplet of information is a csv separated field set, with product name, image, and date of creation
 */
function tng_create_perfect_partners($path, $csv_fields)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('perfect partner paths');
    dpm($path);
    dpm('perfect partner csv');
    dpm($csv_fields);
  }
  $separator = explode(",", $csv_fields);
  $perfect_element_count = count($separator);
  // fix this to what works in the system for api path reference
  //$prefix_url = '/api/products/name/';

  // more than 3 and we have two similar products, less than that we have only 1 similar product
  // we will only handle the first two similar products no matter what we find in the array
  if ($perfect_element_count > 3) {
    $first_exp = explode("//", $separator[1]);
    $second_exp = explode("//", $separator[4]);
    $tid_one = explode("/", $separator[0]);
    // we now use the link name to call an api with, see manifest for details (request to remove was made, we comment for re-introduction later)
    //$separator[0] = '<a href=' . '\'' . '#/' . $tid_one[1] . '\'>' . $tid_one[0] . '</a>';
    $separator[0] = $tid_one[0];
    $tid_two = explode("/", $separator[3]);
    //$separator[3] = '<a href=' . '\'' . '#/' . $tid_two[1] . '\'>' . $tid_two[0] . '</a>';
    $separator[3] = $tid_two[0];
    $perfect_fields[] = $path . '/' . $first_exp[1];
    $perfect_fields[] = $separator[0];
    //$perfect_fields[] = $separator[2];
    $perfect_fields[] = '';
    $perfect_fields[] = $path . '/' . $second_exp[1];
    $perfect_fields[] = $separator[3];
    //$perfect_fields[] = $separator[5];
    $perfect_fields[] = '';
  } else {
    // we guard against no perfect partner data at all
    if (strlen($csv_fields) < 2) {
      $perfect_fields = array('', '', '');
      return $perfect_fields;
    }
    $tid_one = explode("/", $separator[0]);
    // we now use the link name to call an api with, see manifest for details
    //$separator[0] = '<a href=' . '\'' . '#/' . $tid_one[1] . '\'>' . $tid_one[0] . '</a>';
    $separator[0] = $tid_one[0];
    $first_exp = explode("//", $separator[1]);
    $perfect_fields[] = $path . '/' . $first_exp[1];
    $perfect_fields[] = $separator[0];
    //$perfect_fields[] = $separator[2];
    $perfect_fields[] = '';
  }
  return $perfect_fields;
}

/**
 * The process_ functions are
 */

/**
 * @param $product_values - an array with key=>value pairs for the products
 *
 * the following fields have CSV values :
 *
 *  field_tags_keywords
 *  field_season
 *  field_product_category
 *
 * these fields have image, title and creation date CSV sets within it  e.g. (image1, title1, date1, image2, title2, date2) :
 *
 *  field_perfect_partners
 *  field_just_for_you
 *  field_related_products
 *
 */
function process_product($product_values, $labels, $language, $nid)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('product_values');
    dpm($product_values);
    dpm('language for product');
    dpm($language);
    dpm('translated labels');
    dpm($labels);
  }
  $bg_outside_padding = 'background-brand-primary-light outside-padding';
  $bg_inside_padding = 'background-brand-offwhite inside-padding';
  $bg_newplayer_background = 'newplayer-background';
  $h3_sans_head = 'h3 sans-head';
  $h4_sans_normal = 'h4 sans-normal';
  $h3_sans_head_collapse = 'h3 sans-head collapse-toggle';
  $h4_sans_normal_collapse = 'h4 sans-normal collapse-element';
  $col_sm8 = 'col-sm-8 sans-small';
  $col_sm4_resp = 'col-sm-4 img-responsive';
  $h5_sans = 'h5 sans-head-sub col-sm-12';
  $btn_fact_sheet = 'btn btn-info btn-sm';
  $btn_favorite = 'btn btn-primary btn-sm';
  $btn_alt_favorite = 'btn-open-favorites';
  $close_html = '] },';
  $close_perfect = '] } ] },';
  $column_close = '] } ] } ] },';
  $close_product = '] } ] } ] } ] } ]';
  $col_sm4 = 'col-sm-4';
  $switch_collapse = 'isCollapsed = !isCollapsed';
  $expand = 'np-expandable';
  $data_collapse = 'isCollapsed';
  $collapse_element = 'collapse-element';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 20 fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 25;
  $num_fields = count($product_values);

  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    // here we process the fields we find for our product passed in the array of $product_values
    //  start by telling the processor how many fields we found

    //title field has the unique 'admin name' title
    $title = $product_values['title_field'];
    $title = rtrim($title, ' ');
    // replace spaces and slashes with dashes for better matching later
    $title = str_replace(" ", "-", $title);
    $title = str_replace("/", "-", $title);
    $display_title = $product_values['field_display_title'];
    $name = rtrim($title, ' ');
    $num_mkts = count($product_values['field_markets']);
    $markets = $product_values['field_markets'];
    if ($tng_debug == 1) {
      dpm($markets);
      dpm('number of markets found:');
      dpm($num_mkts);
    }
    $product_points = $product_values['field_point_value'];
    if ($product_points < 25) {
      $product_points = 25;
    }

    $feature_chunk = tng_npFeature_maker('products', 'productTemplate', '[]', '0.0.1');
    // language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Product-Manifest-' . $name;
    $newplayer_api_link = '/api/products/name/' . $manifest_title;
    $favorite_link = '/api/favorites/product/' . $manifest_title;
    $product_filter_categories = $product_values['field_product_categories'];
    $product_keywords = $product_values['field_tags_keywords'];
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for product page.');
    $products_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', FALSE);
    $background_padding = tng_npHTML_basic_maker('', $bg_outside_padding, '', '', '', '', '', TRUE);
    $title_chunk = tng_npHTML_basic_maker('', 'h1', '', '', '', $display_title, '', FALSE);
    $subtitle = $product_values['field_subtitle'];
    //if the user does not supply a subtitle, put 2 blanks in so there isn't an 'undefined' shown on the front end.
    if (strlen($subtitle) <= 0) {
      $subtitle = "  ";
    }
    $subtitle_chunk = tng_npHTML_basic_maker('', 'h2', '', '', '', $subtitle, '', FALSE);
    $column_chunk = tng_npColumn_maker('', '2', TRUE);
    $image_path = tng_convert_drupal_to_mean_filename($product_values['field_product_image'], '', FALSE);
    $thumbnail_teaser = tng_convert_drupal_to_mean_filename($product_values['field_product_image'], 'teaser', TRUE);
    $thumbnail_archive = tng_convert_drupal_to_mean_filename($product_values['field_product_image'], 'archive', TRUE);
    $image_chunk = tng_npImage_maker('', $image_path, 'topImage img-responsive', $title);
    $inside_padding = tng_npHTML_basic_maker('', $bg_inside_padding, '', '', '', '', '', TRUE);
    $translated_why = $labels['field_why_there_s_only_one'];
    if (!$translated_why) {
      $translated_why = 'WHY THERE\'S ONLY 1';
    }
    $why_there = tng_npHTML_basic_maker('', $h3_sans_head, '', '', '', $translated_why, '', TRUE);
    $why_content = tng_npHTML_basic_maker('', $h4_sans_normal, '', '', '', $product_values['field_why_there_s_only_one'], '', FALSE);
    $why_content = rtrim($why_content, ', ');
    $translated_demo = $labels['field_demonstration'];
    if (!$translated_demo) {
      $translated_demo = 'DEMONSTRATION';
    }
    $demonstration = tng_npHTML_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, $translated_demo, '', $h4_sans_normal_collapse, $data_collapse, $product_values['field_demonstration']);
    $translated_bene = $labels['field_benefits'];
    if (!$translated_bene) {
      $translated_bene = 'BENEFITS';
    }
    $benefits = tng_npHTML_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, $translated_bene, '', $h4_sans_normal_collapse, $data_collapse, $product_values['field_benefits']);
    $translated_share = $labels['field_if_she_asks_share'];
    if (!$translated_share) {
      $translated_share = 'IF SHE ASKS, SHARE';
    }
    $if_she_asks = tng_npHTML_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, $translated_share, '', $h4_sans_normal_collapse, $data_collapse, $product_values['field_if_she_asks_share']);
    $intro_text = strip_tags($product_values['field_why_there_s_only_one']);
    // the triple has title,image,date
    $basepath = substr($thumbnail_teaser, 0, strripos($thumbnail_teaser, "/"));
    $perfect_partner_data = $product_values['field_perfect_partners'];

    $prefix_url = '/api/products/name/';
    $perfect_data = tng_create_perfect_partners($basepath, $perfect_partner_data);
    if ($tng_debug == 1) {
      dpm('perfect data back:');
      dpm($perfect_data);
      dpm($intro_text);
      dpm($display_title);
      dpm($thumbnail_teaser);
    }
    $translated_perfect = $labels['field_perfect_partners_text'];
    if (!$translated_perfect) {
      $translated_perfect = 'PERFECT PARTNERS';
    }
    $perfect_chunk = tng_npHTML_basic_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, '', $translated_perfect, '', TRUE);
    $perfect_plus_chunk = tng_npHTML_basic_maker('', $collapse_element, '', '', $data_collapse, '', '', TRUE);
    $more_column = tng_npColumn_maker('row', '2', TRUE);
    $row_chunk = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
    $strip = ltrim(rtrim(strip_tags($perfect_data[1])));
    //$dash_name = $prefix_url . 'Product-Manifest-' . str_replace(" ", "-", $strip);
    $dash_name = '';

    //$link_path = '/api/products/name/' . $perfect_data[1];
    $first_image_chunk = tng_npImage_maker('', $perfect_data[0], $col_sm4, $perfect_data[1]) . ',';
    $disclaim_one_chunk = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $perfect_data[1], $dash_name, FALSE);
    $disclaim_two_chunk = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $perfect_data[2], '', FALSE);
    $disclaim_two_chunk = rtrim($disclaim_two_chunk, ', ');
    $disclaim_two_chunk = $disclaim_two_chunk . $close_html;
    $next_disclaim = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
    $strip = ltrim(rtrim(strip_tags($perfect_data[1])));
    //$dash_name = $prefix_url . 'Product-Manifest-' . str_replace(" ", "-", $strip);
    $dash_name = '';
    //$link_path = '/api/products/name/' . $perfect_data[4];
    $second_image_chunk = '';
    $disclaim_second_chunk = '';
    $disclaim_last_chunk = '';
    if (count($perfect_data) > 3) {
      $second_image_chunk = tng_npImage_maker('', $perfect_data[3], $col_sm4, $perfect_data[4]) . ',';
      $disclaim_second_chunk = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $perfect_data[4], $dash_name, FALSE);
      $disclaim_last_chunk = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $perfect_data[5], '', FALSE);
      $disclaim_last_chunk = rtrim($disclaim_last_chunk, ', ');
      // close the row component, end of column component, and another row component, and perfect partners
      $disclaim_last_chunk = $disclaim_last_chunk . $close_perfect;
    } else {
      $next_disclaim = $next_disclaim . $close_perfect;
    }

    $row_phrase = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
    $perfect_partner = tng_npHTML_basic_maker('', $h4_sans_normal, '', '', '', $product_values['field_perfect_partners_text'], '', FALSE);
    $perfect_partner = rtrim($perfect_partner, ', ');
    $perfect_partner = $perfect_partner . $column_close;
    $translated_story = $labels['field_story'];
    if (!$translated_story) {
      $translated_story = 'STORY';
    }
    $story = tng_npHTML_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, $translated_story, '', $h4_sans_normal_collapse, $data_collapse, $product_values['field_story']);
    $translated_quest = $labels['field_customer_questions'];
    if (!$translated_quest) {
      $translated_quest = 'CUSTOMER QUESTIONS';
    }
    $customer_questions = tng_npHTML_maker('', $h3_sans_head_collapse, $switch_collapse, $expand, $translated_quest, '', $h4_sans_normal_collapse, $data_collapse, $product_values['field_customer_questions']);
    $button_column = tng_npColumn_maker('row button-padding', '2', TRUE);
    // todo: figure out a way to translate these buttons
    $like_button = tng_npButton_maker($favorite_link, '', $btn_alt_favorite, 'i18n.FAVORITE_THIS', $language)  . ',';;
    $next_button = tng_npButton_maker('Question1', '', $btn_fact_sheet, 'GET THE FULL FACT SHEET', $language);
    $next_button = rtrim($next_button, ', ');
    $next_button = $next_button . $column_close;

    $more_outer_padding = tng_npHTML_basic_maker('', 'outside-padding', '', '', '', '', '', TRUE);
    $similar_partner_data = $product_values['field_related_products'];
    $similar_data = tng_create_perfect_partners($basepath, $similar_partner_data);
    $similar_column = tng_npColumn_maker('row ', '2', TRUE);
    $similar_row = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
    // guard against creating an empty SEE SIMILAR PRODUCTS label
    if (strlen($similar_partner_data) > 5) {
      $similar_content = tng_npHTML_basic_maker('', $h5_sans, '', '', '', 'SEE SIMILAR PRODUCTS:', '', FALSE);
    } else {
      $similar_content = tng_npHTML_basic_maker('', $h5_sans, '', '', '', '', '', FALSE);
    }
    $strip = ltrim(rtrim(strip_tags($similar_data[1])));
    //$dash_name = $prefix_url . 'Product-Manifest-' . str_replace(" ", "-", $strip);
    $dash_name = '';
    $similar_image = tng_convert_drupal_to_mean_filename($similar_data[0], 'teaser', TRUE);
    $similar_image_chunk = tng_npImage_maker('', $similar_image, $col_sm4_resp, $similar_data[1]) . ',';
    $flexible_content = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $similar_data[1], $dash_name, FALSE);
    $flexible_footer = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $similar_data[2], '', FALSE);
    $flexible_footer = rtrim($flexible_footer, ', ');
    $flexible_footer = $flexible_footer . $close_html;

    // gracefully handle the case if they forget to put in Just For You link (or there isn't one)
    $suggested_partner_data = $product_values['field_just_for_you'];
    if ($suggested_partner_data) {
      $suggested_data = tng_create_perfect_partners($basepath, $suggested_partner_data);
      $suggested_row = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
      $suggested_content = tng_npHTML_basic_maker('', $h5_sans, '', '', '', 'SUGGESTED FOR YOU', '', FALSE);
      $strip = ltrim(rtrim(strip_tags($suggested_data[1])));
      //$dash_name = $prefix_url . 'Product-Manifest-' . str_replace(" ", "-", $strip);
      $dash_name = '';
      $suggested_image = tng_convert_drupal_to_mean_filename($suggested_data[0], 'teaser', TRUE);
      $suggested_image_chunk = tng_npImage_maker('', $suggested_image, $col_sm4_resp, $suggested_data[1]) . ',';
      $suggested_footer = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $suggested_data[1], $dash_name, FALSE);
      $suggested_footer_creation_date = tng_npHTML_basic_maker('', $col_sm8, '', '', '', $suggested_data[2], '', FALSE);
      $suggested_footer_creation_date = rtrim($suggested_footer_creation_date, ', ');
    } else {
      $suggested_row = tng_npHTML_basic_maker('', 'row', '', '', '', '', '', TRUE);
      $suggested_content = tng_npHTML_basic_maker('', $h5_sans, '', '', '', '', '', FALSE);
      $suggested_image_chunk = tng_npImage_maker('', '', $col_sm4_resp, '') . ',';
      $suggested_footer = tng_npHTML_basic_maker('', $col_sm8, '', '', '', '', '', FALSE);
      $suggested_footer_creation_date = tng_npHTML_basic_maker('', $col_sm8, '', '', '', '', '', FALSE);
      $suggested_footer_creation_date = rtrim($suggested_footer_creation_date, ', ');
    }

    // assemble the product from our chunks of data
    $whole_product = $feature_chunk . $content_chunk . $products_background . $background_padding . $title_chunk . $subtitle_chunk . $column_chunk . $image_chunk . ',' . $inside_padding . $why_there . $why_content . $column_close . $demonstration;
    $whole_product = $whole_product . $benefits . $if_she_asks;
    // we will always have one similar product, but might have two, so perfect_data should have either 3 or 6 elements to it.
    $whole_product = $whole_product . $perfect_chunk . $perfect_plus_chunk . $more_column . $row_chunk . $first_image_chunk . $disclaim_one_chunk . $disclaim_two_chunk . $next_disclaim;
    if (count($perfect_data > 3)) {
      $whole_product = $whole_product . $second_image_chunk . $disclaim_second_chunk . $disclaim_last_chunk;
    }
    $whole_product = $whole_product . $row_phrase . $perfect_partner . $story . $customer_questions;
    $whole_product = $whole_product . $button_column . $like_button . $next_button . $more_outer_padding . $similar_column . $similar_row . $similar_content . $similar_image_chunk . $flexible_content . $flexible_footer . $suggested_row;
    $whole_product = $whole_product . $suggested_content . $suggested_image_chunk . $suggested_footer . $suggested_footer_creation_date . $close_product;
    if ($tng_debug == 1) {
      dpm('**whole product so far**');
      dpm($whole_product);
    }
    // here we write the file out to save our manifest formatting for escaped quotes
    //$json_name = str_replace(" ", "-", $manifest_title);
    //$file = file_save_data($whole_product,'public://' . $json_name);

    // when we edit a new node for a product (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_product, 'object_manifest', $manifest_title, $subtitle, $markets, $language, $nid, $display_title, $thumbnail_archive, $newplayer_api_link, $intro_text, $product_filter_categories, $product_keywords, $product_points, '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our product, so we are not processing it.');
    }
  }
}

/**
 * @param $hotspot_values
 * @param $language
 * @param $nid
 * @return mixed
 *
 * If passed a '1' for standalone will create a complete manifest for reNutriv, otherwise just the npHotSpot
 */
function process_hotspot($hotspot_values, $language, $nid, $module, $standalone = NULL)
{
  $tng_debug =0;

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_hot_spot = '] } ] } ] } ]';
  $instructional_text = '';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find a reasonable number of fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 20;
  $num_fields = count($hotspot_values);
  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    $title = $hotspot_values['title_field'];
    $title = str_replace(" ", "-", $title);
    $instruct = $hotspot_values['field_intro'];
    if (isset($instruct)) {
      $instructional_text = $hotspot_values['field_intro'];
    }
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Hotspot-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for hot spot page.');
    $hotspot_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker('background-image', '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $hotspot_values['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', $subtitle, '', FALSE);
    $instructions = $hotspot_values['field_subtitle'];
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $instructions, '', FALSE);
    $whole_hotspot = '';
    if ($standalone == 1) {
      $whole_hotspot = $feature_chunk . $content_chunk . $hotspot_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }
    if ($hotspot_values['field_hot_spot_collection']) {
      $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
      //$hot_top = tng_npHotspot_maker('', 'test-strip', '"medielement/jquery-1.11.1.min.js","mediaelement/GreenSock/TweenMax.js","mediaelement/hotspot.css"');
      $hot_top = tng_npHotspot_maker('', 'test-strip', '');
      $whole_hotspot = $whole_hotspot . $page_wrapper . $hot_top;

      foreach ($hotspot_values as $key => $value) {
        if ($tng_debug == 1) {
          dpm('**** data ****' . $key . ' : ' . $value);
        }
        if ($key == 'field_hot_spot_collection') {
          // remove brackets and curly braces [] {}
          $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
          $sploder = explode('",', $trim_str);
          if ($tng_debug == 1) {
            dpm($sploder);
          }
          $count_of_elements = count($sploder);
          // for each triplet, grab the data and package it up as text, x and y coordinate
          for ($i = 0; $i < $count_of_elements; $i += 3) {
            $t = tng_value_from_pair($sploder[$i]);
            $x = tng_value_from_pair($sploder[$i + 1]);
            $y = tng_value_from_pair($sploder[$i + 2]);
            $xy_combo = $x . ' ' . $y;
            $hotspot_detail = tng_hotspot_button_maker($xy_combo, $t, '');
            $whole_hotspot = $whole_hotspot . $hotspot_detail;
          }
          $whole_hotspot = rtrim($whole_hotspot, ', ');
        }
      }
      $main_image = tng_convert_drupal_to_mean_filename($hotspot_values['field_hot_spot_image'], '', '');
      $end_hot_spot = tng_npHotspot_closer('', $main_image);

      if ($standalone == 1) {
        $whole_hotspot = $whole_hotspot . $end_hot_spot . $close_hot_spot . '}]';
      } else {
        //field_next_button == checkbox, field_next_button_label is the button label
        $create_button = $hotspot_values['field_next_button'];
        // the spanish word for next is 'siguiente'
        if ($create_button == 1) {
          $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
          $whole_hotspot = $whole_hotspot . $end_hot_spot . ',' .$button_chunk . ']}';
        } else {
          $whole_hotspot = $whole_hotspot . $end_hot_spot . ']}';
        }
      }

      if ($tng_debug == 1) {
        dpm($whole_hotspot);
      }
    }

    // when we edit a new node for a hotspot (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_hotspot, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our hotspot, so we are not processing it.');
    }
  }
}


/**
 * @param $story_values
 * @param $language
 * @param $nid
 * @return mixed
 *
 * If passed a '1' for standalone will create a complete manifest for reNutriv, otherwise just the npHotSpot
 */
function process_story($story_values, $language, $nid, $standalone = NULL)
{
  $tng_debug =0;

  $bg_newplayer_background = 'newplayer-background';
  $btn_alt_favorite = 'btn-open-favorites';
  $close_story = '] } ] } ] } ]';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find a reasonable number of fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 20;
  $num_fields = count($story_values);
  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    $title = $story_values['title_field'];
    $title = str_replace(" ", "-", $title);
    $feature_chunk = tng_npFeature_maker('storyDefault', '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = '--' . $title;
    $favorite_link = '/api/favorites/story/' . $manifest_title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for story page.');
    $story_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', FALSE);
    $background_chunk = tng_npHTML_basic_maker('', 'background-brand-primary-light outside-padding', '', '', '', '', '', TRUE);
    $background_chunk = rtrim($background_chunk, ', ');
    $whole_story = '';
    if ($standalone == 1) {
      $whole_story = $feature_chunk . $content_chunk . $story_background . $background_chunk;
    }
    // story will have an image, some headline or title, then story text
    $main_image = $story_values['field_story_image'];
    $main_image = tng_convert_drupal_to_mean_filename($main_image);
    $image_chunk = tng_npImage_maker('', $main_image, 'hero img-responsive center-block', '') . ',';
    $story_copy = $story_values['field_story_copy'];
    $story_copy = preg_replace('/\s+/S', " ", $story_copy);
    $story_chunk = tng_npHTML_basic_maker('', 'body-copy center-padding', '', '', '', $story_copy, '', FALSE);
    $story_label = $story_values['field_story_label'];
    $label_chunk = tng_npHTML_basic_maker('', 'h5 col-sm-12 sans-head center-block center-padding', '', '', '', $story_label, '', FALSE);
    $story_header = $story_values['field_story_headline'];
    $header_chunk = tng_npHTML_basic_maker('', 'h1 header', '', '', '', $story_header, '', FALSE);
    $signature_chunk = tng_npHTML_basic_maker('', 'beths-signature center-padding', '', '', '', '', '', FALSE);
    //$signature_chunk = rtrim($signature_chunk, ', ');
    $like_button = tng_npButton_maker($favorite_link, '', $btn_alt_favorite, 'i18n.FAVORITE_THIS', $language);
    $whole_story = $whole_story . $image_chunk . $label_chunk . $header_chunk . $story_chunk . $signature_chunk . $like_button;

    if ($standalone == 1) {
      $whole_story = $whole_story . $close_story;
    }
    // when we edit a new node for a story (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_story, 'object_manifest', $manifest_title, '', '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our story, so we are not processing it.');
    }
  }
}

/**
 * @param $diary_values
 * @param $language
 * @param $nid
 * @return mixed
 *
 * If passed a '1' for standalone will create a complete manifest for New Dimension, otherwise just the np_diaryND
 */
function process_diary($diary_values, $language, $nid, $standalone = NULL)
{
  $tng_debug =0;

  $bg_newplayer_background = 'newplayer-background';
  //$btn_alt_favorite = 'btn-open-favorites';
  $close_diary = '] } ] } ] } ]';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find a reasonable number of fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 20;
  $num_fields = count($diary_values);
  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    $title_no_dashes = $diary_values['title_field'];
    $title = $diary_values['title_field'];
    $title = str_replace(" ", "-", $title);
    $feature_chunk = tng_npFeature_maker('np_diaryND', '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = '--' . $title;
    //$favorite_link = '/api/favorites/diary/' . $manifest_title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for diary page.');
    $diary_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', FALSE);
    $background_chunk = tng_npHTML_basic_maker('', 'background-brand-primary-light outside-padding', '', '', '', '', '', TRUE);
    $background_chunk = rtrim($background_chunk, ', ');
    $whole_diary = '';
    if ($standalone == 1) {
      $whole_diary = $feature_chunk . $content_chunk . $diary_background . $background_chunk;
    }
    // diary will have an image, some headline or title, then diary text, input field, and a submit button
    $main_image = $diary_values['field_story_image'];
    $main_image = tng_convert_drupal_to_mean_filename($main_image);
    $image_chunk = tng_npImage_maker('', $main_image, 'hero img-responsive center-block', '') . ',';
    $diary_title = tng_npHTML_basic_maker('', 'h1 header', '', '', '', $title_no_dashes, '', FALSE);
    $diary_copy = $diary_values['field_intro'];
    $diary_copy = preg_replace('/\s+/S', " ", $diary_copy);
    $diary_chunk = tng_npHTML_basic_maker('', 'body-copy center-padding', '', '', '', $diary_copy, '', FALSE);
    $input_field = '<input type=\'\' class=\'form-control\' id=\'diaryInput\' placeholder=\'Diary Entry\'>';
    $input_chunk = tng_npHTML_basic_maker('', 'body-copy center-padding input-field', '', '', '', $input_field, '', FALSE);
    $whole_diary = $whole_diary . $image_chunk . $diary_title . $diary_chunk . $input_chunk ;
    $whole_diary = rtrim($whole_diary, ', ');
    if ($standalone == 1) {
      $whole_diary = $whole_diary . $close_diary;
    }

    // implement the V3 from Creative Few which has fewer elements and is not a 'real' NewPlayer manifest
    // todo: this ^

    // when we edit a new node for a diary (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_diary, 'object_manifest', $manifest_title, '', '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our diary, so we are not processing it.');
    }
  }
}


/**
 * @param $dragmatch_values
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_dragmatch($dragmatch, $language, $nid, $module, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('drag match object');
    dpm($dragmatch);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_drag_drop = '] } ] } ] } ] } ]';
  $instructional_text = '';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 20 fields, layout the page
  $min_dragdrop_fields = 1;
  $max_dragdrop_fields = 20;
  $num_fields = count($dragmatch);

  //todo: we haven't implemented the feedback goodies yet, so let's set one and wait for Christian to implement it, then rework
  $correct_feedback = $dragmatch['field_custom_correct_feedback'];
  $incorrect_feedback = $dragmatch['field_custom_incorrect_feedback'];
  $placeholder = '<p></p>';

  if ($num_fields >= $min_dragdrop_fields && $num_fields <= $max_dragdrop_fields) {
    $title = $dragmatch['title_field'];
    $title = str_replace(" ", "-", $title);
    $instruct = $dragmatch['field_intro'];
    if (isset($instruct)) {
      $instructional_text = $dragmatch['field_intro'];
    }
    if ($tng_debug == 1) {
      dpm('**title drag and match**');
      dpm($title);
    }
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Drag-Match-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for drag and drop page.');
    $dragmatch_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $dragmatch['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', '', '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $subtitle, '', FALSE);
    if ($standalone == 1) {
      $whole_dragdrop = $feature_chunk . $content_chunk . $dragmatch_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }

    if ($dragmatch['field_drag_match_collection']) {
      {
        $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
        $drag_top = tng_npDragAndDropMatch_maker('', '', $correct_feedback, $incorrect_feedback, '"mediaelement/GreenSock/TweenMax.js","mediaelement/GreenSock/utils/Draggable.js","mediaelement/angular-tweenmax-draggable.js"');
        $whole_dragdrop = $whole_dragdrop . $page_wrapper. $drag_top;

        foreach ($dragmatch as $key => $value) {
          if ($tng_debug == 1) {
            dpm('**** data ****' . $key . ' : ' . $value);
          }
          if ($key == 'field_drag_match_collection') {
            // remove brackets and curly braces [] {}
            $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
            $sploder = explode('",', $trim_str);
            if ($tng_debug == 1) {
              dpm($sploder);
            }
            $count_of_elements = count($sploder);
            // for each pair of matching content, grab the data and package it up as content, matching content
            for ($i = 0; $i < $count_of_elements; $i += 2) {
              $left_text_or_image = tng_value_from_pair($sploder[$i]);
              $right_text_or_image = tng_value_from_pair($sploder[$i + 1]);
              $story_detail = tng_dragdrop_button_maker('', '', '', $left_text_or_image, '', $right_text_or_image, '');
              $whole_dragdrop = $whole_dragdrop . $story_detail;
            }
            $whole_dragdrop = rtrim($whole_dragdrop, ', ');
          }
        }
        $end_dragdrop_spot = tng_npDragAndDrop_closer($placeholder, '');


        if ($standalone == 1) {
          $whole_dragdrop = $whole_dragdrop . $end_dragdrop_spot . $close_drag_drop;
        } else {
          //field_next_button == checkbox, field_next_button_label is the button label
          $create_button = $dragmatch['field_next_button'];
          // the spanish word for next is 'siguiente'
          if ($create_button == 1) {
            $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
            $whole_dragdrop = $whole_dragdrop . $end_dragdrop_spot . ',' . $button_chunk . ']}';
          } else {
            $whole_dragdrop = $whole_dragdrop . $end_dragdrop_spot . ']}';
          }
        }

        if ($tng_debug == 1) {
          dpm($whole_dragdrop);
        }
      }

      // when we edit a new node for a hotspot (or make it for the first time), create a new object_manifest
      // to create an updated manifest, delete the old manifest and re-edit the product
      $new_nid = tng_create_manifest_node($whole_dragdrop, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
      // return the new nid to set it on the parent node
      return $new_nid;
    } else {
      if ($tng_debug == 1) {
        dpm('Received more or less items than we expected for our hotspot, so we are not processing it.');
      }
    }
  }
}



/**
 * @param $dragselect
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_dragselect($dragselect, $language, $nid = null, $module, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('drag match object');
    dpm($dragselect);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_drag_drop = '] } ] } ] } ]';
  $instructional_text = '';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 20 fields, layout the page
  $min_dragdrop_fields = 1;
  $max_dragdrop_fields = 20;
  $num_fields = count($dragselect);

  $correct_feedback = $dragselect['field_correct_feedback'];
  $correct_feedback =  str_replace('"', '\"', $correct_feedback);
  $incorrect_feedback = $dragselect['field_incorrect_feeback'];
  $incorrect_feedback =  str_replace('"', '\"', $incorrect_feedback);
  $intro_text = $dragselect['field_intro_text'];
  if (isset($intro_text)) {
    $instructional_text = $dragselect['field_intro_text'];
  }
  $placeholder = '<p></p>';
  $drag_question = $dragselect['field_drag_select_question'];
  $combine_question_text = $instructional_text . $drag_question;
  $drag_select_background_image = $dragselect['field_drag_select_background'];
  $mean_back_image = tng_convert_drupal_to_mean_filename($drag_select_background_image);

  if ($num_fields >= $min_dragdrop_fields && $num_fields <= $max_dragdrop_fields) {
    $title = $dragselect['title_field'];
    $title = str_replace(" ", "-", $title);
    if ($tng_debug == 1) {
      dpm('**title drag and match**');
      dpm($title);
    }
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Drag-Select-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for drag and select page.');
    $dragselect_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $dragselect['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', $subtitle, '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $instructional_text, '', FALSE);
    if ($standalone == 1) {
      $whole_dragselect = $feature_chunk . $content_chunk . $dragselect_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }

    if ($dragselect['field_drag_select_collection']) {
      {
        $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $combine_question_text);
        $drag_top = tng_npDragAndSelect_maker('', '', $correct_feedback, $incorrect_feedback, 'true', '', $language, $mean_back_image);
        $whole_dragselect .= $page_wrapper . $drag_top;
        $select_path = 'assets/styles/drag_select_image/public/';

        foreach ($dragselect as $key => $value) {
          if ($tng_debug == 1) {
            dpm('**** data ****' . $key . ' : ' . $value);
          }
          if ($key == 'field_drag_select_collection') {
            // remove brackets and curly braces [] {}
            $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
            $sploder = explode('",', $trim_str);
            if ($tng_debug == 1) {
              dpm($sploder);
            }
            $count_of_elements = count($sploder);
            // there may be 2 or 3 parms, check for image field to know
            for ($i = 0; $i < $count_of_elements; $i += $var_field_num) {
              $has_image = strpos($sploder[$i], 'field_drag_select_image');
              if ($has_image != false) {
                $var_field_num = 3;
                // they are inserted into the 'image' field of the draggable button set
                $left_image = tng_value_from_pair($sploder[$i]);
                $remo = str_replace('public://', '', $left_image);
                $conv_image = $select_path . $remo;
                $text = tng_value_from_pair($sploder[$i + 1]);
                $correct_or_not = tng_value_from_pair($sploder[$i + 2]);
                if ($correct_or_not == "1") {
                  $story_detail = tng_dragselect_button_maker('', '', 'true', $text, $conv_image, '', '');
                } else {
                  $story_detail = tng_dragselect_button_maker('', '', 'false', $text, $conv_image, '', '');
                }
              } else {
                $var_field_num = 2;
                $left_text_or_image = tng_value_from_pair($sploder[$i]);
                $right_text_or_image = tng_value_from_pair($sploder[$i + 1]);
                if ($right_text_or_image == "1") {
                  $story_detail = tng_dragselect_button_maker('', '', 'true', $left_text_or_image, '', '', '');
                } else {
                  $story_detail = tng_dragselect_button_maker('', '', 'false', $left_text_or_image, '', '', '');
                }

              }
              $whole_dragselect .= $story_detail;
            }
            $whole_dragselect = rtrim($whole_dragselect, ', ');
          }
        }
        $end_dragdrop_spot = tng_npDragAndDrop_closer($placeholder, '');


        if ($standalone == 1) {
          $whole_dragselect .= $end_dragdrop_spot . $close_drag_drop;
        } else {
          //field_next_button == checkbox, button labels are handled in the tng_npButton_maker code for en/es/frca
          $create_button = $dragselect['field_next_button'];
          if ($create_button == 1) {
            $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
            $whole_dragselect .= $end_dragdrop_spot . ',' . $button_chunk . ']}';
          } else {
            $whole_dragselect .= $end_dragdrop_spot . ']}';
          }
        }

        if ($tng_debug == 1) {
          dpm($whole_dragselect);
        }
      }

      // when we edit a new node for a dragselect (or make it for the first time), create a new object_manifest
      // to create an updated manifest, delete the old manifest and re-edit the product
      $new_nid = tng_create_manifest_node($whole_dragselect, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
      // return the new nid to set it on the parent node
      return $new_nid;
    } else {
      if ($tng_debug == 1) {
        dpm('Received more or less items than we expected for our hotspot, so we are not processing it.');
      }
    }
  }
}

/**
 * @param $dragmatch_values
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_dragmatch_prioritize($dragprioritize, $language, $nid)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('drag match prioritize object');
    dpm($dragprioritize);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_drag_drop = '] } ] } ] } ]';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 20 fields, layout the page
  $min_dragmatch_fields = 1;
  $max_dragmatch_fields = 20;
  $num_fields = count($dragprioritize);

  //todo: we haven't implemented the feedback goodies yet, so let's set one and wait for Christian to implement it, then rework
  $correct_feedback = $dragprioritize['field_custom_correct_feedback'];
  $incorrect_feedback = $dragprioritize['field_custom_incorrect_feedback'];
  $placeholder = '<p>this is the placeholder content</p>';
  $boxclass = 'box';
  $boximage = '/assets/images/hotspot.png';

  if ($num_fields >= $min_dragmatch_fields && $num_fields <= $max_dragmatch_fields) {
    // here we process the fields we find for our hot spot passed in the array of $object_values
    //  start by telling the processor how many fields we found
    //dpm('Hot Spot had ' . $num_fields . ' fields.');
    $title = $dragprioritize->title;
    dpm('****title****');
    dpm($title);
    $title = str_replace(" ", "-", $title);
    $instruct = $dragprioritize['field_intro'];
    if (isset($instruct)) {
      $instructional_text = $dragprioritize['field_intro'];
    }
    if ($tng_debug == 1) {
      dpm('**title drag and drop**');
      dpm($title);
    }
    //$title = 'Re-Nutriv Drag and Drop';
    // we don't use the subtitle currently,but code for it in case we need it later.
    // $subtitle = $dragmatch['field_subtitle'];
    $feature_chunk = tng_npFeature_maker('reNutriv', '', '[]', '0.0.1');
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Drag-Prioritize-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for drag match prioritize.');
    $dragmatch_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $dragprioritize['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', '', '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $subtitle, '', FALSE);

    $whole_dragdrop = $feature_chunk . $content_chunk . $dragmatch_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;

    if ($dragprioritize['field_drag_priority_collection']) {
      {
        $drag_top = tng_npDragAndMatchPriority_maker('', '', $correct_feedback, $incorrect_feedback, '');
        $whole_dragdrop = $whole_dragdrop . $drag_top;

        foreach ($dragprioritize as $key => $value) {
          if ($tng_debug == 1) {
            dpm('**** data ****' . $key . ' : ' . $value);
          }
          if ($key == 'field_drag_priority_collection') {
            // remove brackets and curly braces [] {}
            $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
            $sploder = explode('",', $trim_str);
            if ($tng_debug == 1) {
              dpm($sploder);
            }
            $count_of_elements = count($sploder);
            // for each pair of matching content, grab the data and package it up as content, matching content
            for ($i = 0; $i < $count_of_elements; $i += 1) {
              $left_text_or_image = tng_value_from_pair($sploder[$i]);
              $hotspot_detail = tng_dragdrop_button_maker('', '', '', $left_text_or_image, $boximage, '', $boximage);
              $whole_dragdrop = $whole_dragdrop . $hotspot_detail;
            }
            $whole_dragdrop = rtrim($whole_dragdrop, ', ');
          }
        }
        $end_dragdrop_spot = tng_npDragAndDrop_closer($placeholder, '');
        $whole_dragdrop = $whole_dragdrop . $end_dragdrop_spot . $close_drag_drop;
        if ($tng_debug == 1) {
          dpm($whole_dragdrop);
        }
      }

      // when we edit a new node for a dragmatch (or make it for the first time), create a new object_manifest
      // to create an updated manifest, delete the old manifest and re-edit the product
      $new_nid = tng_create_manifest_node($whole_dragdrop, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
      // return the new nid to set it on the parent node
      return $new_nid;
    } else {
      if ($tng_debug == 1) {
        dpm('Received more or less items than we expected for our drag match prioritize, so we are not processing it.');
      }
    }
  }
}

/**
 * @param $reveal_values
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_reveal($reveal_values, $language, $nid, $module, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('reveal object');
    dpm($reveal_values);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_reveal = '] } ] } ] } ] } ] } ]';
  $instructional_text = '';
  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP reveal page
  // and if we find between 1 and 20 fields, layout the page
  $min_reveal_fields = 1;
  $max_reveal_fields = 20;
  $num_fields = count($reveal_values);

  if ($num_fields >= $min_reveal_fields && $num_fields <= $max_reveal_fields) {
    $title = $reveal_values['title_field'];
    $title = str_replace(" ", "-", $title);
    $instruct = $reveal_values['field_intro'];
    if (isset($instruct)) {
      $instructional_text = $reveal_values['field_intro'];
    }

    if ($tng_debug == 1) {
      dpm('**title for reveal**');
      dpm($title);
    }
    // we don't use the subtitle currently, but code for it in case we need it later.
    // $subtitle = $reveal['field_subtitle'];
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Reveal-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for reveal.');
    $reveal_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $reveal_values['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', '', '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $subtitle, '', FALSE);
    $whole_reveal = '';
    if ($standalone == 1) {
      $whole_reveal = $feature_chunk . $content_chunk . $reveal_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }
    if ($reveal_values['field_reveal_collection']) {
      $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
      $reveal_top = tng_npReveal_maker('reveal-test-id', 'reveal-test-class');
      $whole_reveal .= $page_wrapper . $reveal_top;
      $all_of_them = $reveal_values['field_reveal_collection'];
      $trim_str = trim($all_of_them, "\x5B \x7B \x5D \x7D");
      $sploder = explode('",', $trim_str);
      $count_of_elements = count($sploder);
      if ($tng_debug == 1) {
        dpm($sploder);
      }
      $thumb_path = 'assets/styles/reveal_thumbnail/public/';
      $hero_path = 'assets/styles/reveal_hero/public/';
      $video_path = 'assets/';
      // for each trio of content, a bit of messy processing
      // the content is within quotes and need removing, the images need style work and charm
      $revealnumber = 0;
      $increment = 3;
      for ($i = 0; $i < $count_of_elements; $i += $increment) {
        $key = explode('~', $sploder[$i]);
        $key_two = explode('~', $sploder[$i + 1]);
        $reveal = 'reveal-' . $revealnumber;
        if ($key[0] == '"field_reveal_thumbnail" ' && $key_two[0] == '"field_reveal_text" ') {
          $reveal = 'reveal-' . $revealnumber;
          $thumb_splode = explode('~', $sploder[$i]);
          $remo = str_replace(' "public://', '', $thumb_splode[1]);
          $thumb_image = $thumb_path . $remo;
          $thumb_image = tng_convert_drupal_to_mean_filename($thumb_image, '', '', 'true');
          $video_splode = explode('~', $sploder[$i + 2]);
          $video_url = str_replace('"', '', $video_splode[1] . ':' . $video_splode[2]);
          $video_url = tng_convert_drupal_to_mean_filename($video_url, '', '', 'true');
          $value = explode('~', $sploder[$i + 1]);
          $stripped_text_one = str_replace(' "', '', $value[1]);
          $stripped_text_one = str_replace('" ', '', $stripped_text_one);
          $stripped_text_one = str_replace('"', '', $stripped_text_one);
          $image_or_video = 'npVideo';
          $reveal_detail = tng_npRevealItem_maker($reveal, '', $stripped_text_one, $thumb_image, '', $image_or_video, '', '', '', $video_url, 'mp4');
          $increment = 3;
        } else if ($key[0] == '"field_reveal_thumbnail" ' && $key_two[0] == '"field_reveal_hero" ') {
          $reveal = 'reveal-' . $revealnumber;
          $thumb_splode = explode('~', $sploder[$i]);
          $remo = str_replace(' "public://', '', $thumb_splode[1]);
          $thumb_image = $thumb_path . $remo;
          $thumb_image = tng_convert_drupal_to_mean_filename($thumb_image, '', '', 'true');
          $hero_splode = explode('~', $sploder[$i + 1]);
          $remo = str_replace(' "public://', '', $hero_splode[1]);
          $hero_image = $hero_path . $remo;
          $hero_image = tng_convert_drupal_to_mean_filename($hero_image, '', '', 'true');
          $value = explode('~', $sploder[$i + 2]);
          $stripped_text_one = str_replace(' "', '', $value[1]);
          $stripped_text_one = str_replace('" ', '', $stripped_text_one);
          $stripped_text_one = str_replace('"', '', $stripped_text_one);
          $image_or_video = 'npImage';
          $reveal_detail = tng_npRevealItem_maker($reveal, '', $stripped_text_one, $thumb_image, '', $image_or_video, '', $hero_image, '', '', '');
          $increment = 3;
        }
        else if ($key[0] == '"field_reveal_text" ' && $key_two[0] == '"field_reveal_hero_video" ') {
          $thumb_splode = explode('~', $sploder[$i+1]);
          $remo = str_replace('//', '', $thumb_splode[1]);
          $video_image = $video_path . $remo;
          $value_two = explode('~', $sploder[$i]);
          $stripped_text_two = str_replace('" ', '', $value_two[1]);
          $stripped_text_two = str_replace(' "', '', $stripped_text_two);
          $stripped_text_two = str_replace('"', '', $stripped_text_two);
          $image_or_video = 'npVideo';
          $reveal_detail = tng_npRevealItem_maker($reveal, '', $stripped_text_two, '', '', $image_or_video, '', '', '', $video_image, '');
          $increment = 2;
        }
        $revealnumber += 1;

        $whole_reveal .= $reveal_detail;
      }
      $whole_reveal = rtrim($whole_reveal, ', ');
    }

    if ($standalone == 1) {
      $whole_reveal .= $close_reveal;
    } else {
      //field_next_button == checkbox, field_next_button_label is the button label
      $create_button = $reveal_values['field_next_button'];
      // the spanish word for next is 'siguiente'
      if ($create_button == 1) {
        $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
        $whole_reveal .= ']},' . $button_chunk . ']}';
      } else {
        $whole_reveal .= ']}]}';
      }
    }
    if ($tng_debug == 1) {
      dpm($whole_reveal);
    }

    // when we edit a new node for a reveal (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_reveal, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;

  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our reveal prioritize, so we are not processing it.');
    }
  }
}


/**
 * @param $flashcard_values
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_flashcards($flashcard_values, $language, $nid, $module, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('flash card object');
    dpm($flashcard_values);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_flashcard = '] } ] } ] } ] } ] } ]';
  $close_bare_metal = '] } ] }';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP flash page
  // and if we find between 1 and 20 fields, layout the page
  $min_flashcard_fields = 1;
  $max_flashcard_fields = 20;
  $num_fields = count($flashcard_values);
  $instructions = '<p>Select each image to learn more.</p>';

  if ($num_fields >= $min_flashcard_fields && $num_fields <= $max_flashcard_fields) {
    $title = $flashcard_values['title_field'];
    $title = str_replace(" ", "-", $title);
    if (isset($flashcard_values['field_intro'])) {
      $instructional_text = $flashcard_values['field_intro'];
    }
    if ($tng_debug == 1) {
      dpm('**title for flashcards**');
      dpm($title);
    }
    // we don't use the subtitle currently, but code for it in case we need it later.
    // $subtitle = flashcard_values['field_subtitle'];
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Flashcard-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for flashcards.');
    $flashcard_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $flashcard_values['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', $subtitle, '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $instructions, '', FALSE);
    $whole_flashcard = '';
    if ($standalone == 1) {
      $whole_flashcard = $feature_chunk . $content_chunk . $flashcard_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }
    if ($flashcard_values['field_flash_card_collection']) {
      $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
      $flashcard_top = tng_npFlashCard_maker('flash-cards-test-id', 'flash-cards-test-class');
      $whole_flashcard .= $page_wrapper . $flashcard_top;
      $all_of_them = $flashcard_values['field_flash_card_collection'];
      $trim_str = trim($all_of_them, "\x5B \x7B \x5D \x7D");
      // take only the first two elements, 'field_back_card' and 'field_top_card'
      $sploder = explode('",', $trim_str);
      // handle the cases for flash cards where there is an image on front and back,
      // image on front, but not back and image on back but not front. (or not)
      $count_of_elements = count($sploder);
      if ($tng_debug == 1) {
        dpm($sploder);
      }
      // for each quad of content, a bit of messy processing
      // the content is within quotes and need removing, the images need style work and charm
      //depending on what the cards look like, we'll end up with a front and a back.
      for ($i = 0; $i < $count_of_elements; $i += 2) {
        // check for images so we know how to process
        $front_http = strpos($sploder[$i], 'http');
        $back_http = strpos($sploder[$i + 1], 'http');
        if ($front_http === false && $back_http === false) {
          // it has text only
          $key = explode('~', $sploder[$i], 2);
          $key_two = explode('~', $sploder[$i + 1], 2);
          $omni_one = str_replace('"', '', $key[1]);
          $omni_two = str_replace('"', '', $key_two[1]);
          $flashcard_detail = tng_npFlashCardItem_maker('', $omni_two, $omni_one);
        } else if ($front_http >= 0 && $back_http === false) {
          $key = explode('~', $sploder[$i], 2);
          $start_pos1 = strpos($key[1], 'http');
          $end_pos1 = strpos($key[1], '.jpg') + 4;
          if ($end_pos1 == 4) {
            $end_pos1 = strpos($key[1], '.gif') + 4;
          }
          $str_beg_one = substr($key[1], 0, $start_pos1);
          $str_end_one = substr($key[1], $end_pos1);
          $url1 = substr($key[1], $start_pos1, $end_pos1 - $start_pos1);
          $asset_url1 = tng_convert_drupal_to_mean_filename($url1);
          $omni_one = $str_beg_one . $asset_url1 . $str_end_one;
          $omni_one = str_replace('"', '', $omni_one);
          $key_two = explode('~', $sploder[$i + 2], 2);
          $omni_two = str_replace('"', '', $key_two[1]);
          $flashcard_detail = tng_npFlashCardItem_maker('', $omni_two, $omni_one);
        } else if ($back_http >= 0 && $front_http === false) {
          // a little bit of tedious string coding to take the full path url, extract it, change to mean style,
          // then put it back together again for our flash cards front and back as they come in pairs.
          $key_two = explode('~', $sploder[$i + 1], 2);
          $start_pos2 = strpos($key_two[1], 'http');
          $end_pos2 = strpos($key_two[1], '.jpg') + 4;
          if ($end_pos2 == 4) {
            $end_pos2 = strpos($key_two[1], '.gif') + 4;
          }
          $str_beg_two = substr($key_two[1], 0, $start_pos2);
          $str_end_two = substr($key_two[1], $end_pos2);
          $url2 = substr($key_two[1], $start_pos2, $end_pos2 - $start_pos2);
          $asset_url2 = tng_convert_drupal_to_mean_filename($url2);
          $omni_two = $str_beg_two . $asset_url2 . $str_end_two;
          $omni_two = str_replace('"', '', $omni_two);
          $key = explode('~', $sploder[$i], 2);
          $omni_one = str_replace('"', '', $key[1]);
          $flashcard_detail = tng_npFlashCardItem_maker('', $omni_two, $omni_one);
        } else if ($back_http >= 0 && $front_http >= 0) {
          // a little bit of tedious string coding to take the full path url, extract it, change to mean style,
          // then put it back together again for our flash cards front and back as they come in pairs.
          $key = explode('~', $sploder[$i], 2);
          $key_two = explode('~', $sploder[$i + 1], 2);
          $start_pos1 = strpos($key[1], 'http');
          $end_pos1 = strpos($key[1], '.jpg') + 4;
          if ($end_pos1 == 4) {
            $end_pos1 = strpos($key[1], '.gif') + 4;
          }
          $start_pos2 = strpos($key_two[1], 'http');
          $end_pos2 = strpos($key_two[1], '.jpg') + 4;
          if ($end_pos2 == 4) {
            $end_pos2 = strpos($key_two[1], '.gif') + 4;
          }
          $str_beg_one = substr($key[1], 0, $start_pos1);
          $str_end_one = substr($key[1], $end_pos1);
          $str_beg_two = substr($key_two[1], 0, $start_pos2);
          $str_end_two = substr($key_two[1], $end_pos2);
          $url1 = substr($key[1], $start_pos1, $end_pos1 - $start_pos1);
          $url2 = substr($key_two[1], $start_pos2, $end_pos2 - $start_pos2);

          $asset_url1 = tng_convert_drupal_to_mean_filename($url1);
          $asset_url2 = tng_convert_drupal_to_mean_filename($url2);
          $omni_one = $str_beg_one . $asset_url1 . $str_end_one;
          $omni_two = $str_beg_two . $asset_url2 . $str_end_two;
          $omni_one = str_replace('"', '', $omni_one);
          $omni_two = str_replace('"', '', $omni_two);
          // the array assignment makes for predictable order of our duo set of data
          $flashcard_detail = tng_npFlashCardItem_maker('', $omni_two, $omni_one);
        }
        $whole_flashcard .= $flashcard_detail;
      }
      $whole_flashcard = rtrim($whole_flashcard, ', ');
    }

    if ($standalone == 1) {
      $whole_flashcard .= $close_flashcard;
    } else {
      //field_next_button == checkbox, field_next_button_label is the button label
      $create_button = $flashcard_values['field_next_button'];
      if ($create_button == 1) {
        $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
        $whole_flashcard .= ']},' . $button_chunk . ']}';
      } else {
        $whole_flashcard .= ']}]}';
      }
    }

    if ($tng_debug == 1) {
      dpm($whole_flashcard);
    }

    // when we edit a new node for a flashcard (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_flashcard, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;

  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our flashcard prioritize, so we are not processing it.');
    }
  }
}

/**
 * @param $badgeobject = array of list pieces to form our manifest
 * @param $language = language
 * @param $nid
 * @return mixed
 *
 * The assumption here is that a list item will always be a part of series of components, hence the final ',' at the end of it.
 *
 */
function process_list($listobject, $language, $nid, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('nid:');
    dpm($nid);
    dpm('language');
    dpm($language);
    dpm('list object');
    dpm($listobject);
  }

  // and if we find between 1 and 20 fields, layout the page
  $min_list_fields = 1;
  $max_list_fields = 20;
  $num_fields = count($listobject);

  //leave this check for now, although it may not be needed.
  if ($num_fields >= $min_list_fields && $num_fields <= $max_list_fields) {
    // here we process the fields we find for our list passed in the array of $object_values
    // start by telling the processor how many fields we found
    $title = $listobject['title_field'];
    $title = str_replace(" ", "-", $title);
    $subtitle = $listobject['field_subtitle'];
    if (isset($listobject['field_intro'])) {
      $instructional_text = $listobject['field_intro'];
    }
    if ($tng_debug == 1) {
      dpm('****npLlist title****');
      dpm($title);
    }
    // the field layout is single or double column formatting
    $wrap = $listobject['field_layout'];
    if ($wrap == 1) {
      $data_ng_wrap = "true";
    } else {
      $data_ng_wrap = "false";
    }
    $whole_list = '';
    $manifest_title = 'List-Manifest-' . $title;

    if ($listobject['field_list_item']) {
      //process the list just once here in pairs of image/text, video/text, audio/text
      $all_of_them = $listobject['field_list_item'];
      $trim_str = trim($all_of_them, "\x5B \x7B \x5D \x7D");
      $sploder = explode('",', $trim_str);
      $count_of_elements = count($sploder);
      $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
      $whole_list .= $page_wrapper;
      for ($i = 0; $i < $count_of_elements; $i += 2) {
        $key = explode('~', $sploder[$i]);
        if ($key[0] == '"field_list_image" ') {
          $first_image = str_replace('"', '', $key[1] );
          $first_image = tng_convert_drupal_to_mean_filename($first_image, '', '', 'true');
          $value = explode('~', $sploder[$i + 1], 2);
          $second_text = preg_replace('/\s+/S', " ", $value[1]);
          $second_text = ltrim($second_text, ' "');
          $second_text = ltrim($second_text, '"');
          $second_text = rtrim($second_text, '"');
          $second_text = str_replace('"', '\"',$second_text);
          $listobject_detail = tng_npList_maker('', 'h6 instructional', $data_ng_wrap, '', $second_text, 'npImage', '', $first_image, '', '', '', '');
          $whole_list .= $listobject_detail;
        } else if ($key[0] == '"field_list_text" ') {
          $first_text = preg_replace('/\s+/S', " ", $key[1]);
          $first_text = ltrim($first_text, ' "');
          $first_text = ltrim($first_text, '"');
          $first_text = rtrim($first_text, '"');
          $first_text = str_replace('"', '\"', $first_text);
          $value = explode('~', $sploder[$i + 1], 2);
          if (count($value) > 1) {
            $second_video = str_replace('"', '', $value[1]);
            $second_video = tng_convert_drupal_to_mean_filename($second_video, '', '', 'true');
            $listobject_detail = tng_npList_maker('', 'h6 instructional', $data_ng_wrap, '', $first_text, 'npVideo', '', '', '', '', $second_video, 'mp4');
          } else {
            $listobject_detail = tng_npList_maker('', 'h6 instructional', $data_ng_wrap, '', $first_text, '', '', '', '', '', '', '');
          }
          $whole_list .= $listobject_detail;
        }
      }
    }

    if ($standalone == 1) {
      $whole_list .= ']}';
    } else {
      //field_next_button == checkbox, button labels are handled in the tng_npButton_maker code for en/es/frca
      $create_button = $listobject['field_next_button'];
      if ($create_button == 1) {
        $button_chunk = tng_npButton_maker('', 'btn-next', '', '', $language);
        $whole_list .= $button_chunk . ']}';
      } else {
        $whole_list = rtrim($whole_list, ', ');
        $whole_list .= ']}';
      }
    }

    if ($tng_debug == 1) {
      dpm('****finished List manifest****');
      dpm($whole_list);
    }
    // when we edit a new node for a list (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_list, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our drag match prioritize, so we are not processing it.');
    }
  }
}

/**
 * @param $badgeobject = array of badge pieces
 * @param $language = language
 * @param $nid
 * @return mixed
 *
 *
 */
function process_badge($badgeobject, $language, $nid)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('nid:');
    dpm($nid);
    dpm('language');
    dpm($language);
    dpm('badge object');
    dpm($badgeobject);
  }
  // and if we find between 1 and 20 fields, layout the page
  $min_batch_fields = 1;
  $max_batch_fields = 20;
  $num_fields = count($badgeobject);

  //leave this check for now, although it may not be needed.
  if ($num_fields >= $min_batch_fields && $num_fields <= $max_batch_fields) {
    $title = $badgeobject['title_field'];
    $title = rtrim($title, ' ');
    $english_title = $badgeobject['field_original_engbadge_title'];
    $english_title = rtrim($english_title, ' ');
    // replace spaces and slashes with dashes for better matching later
    $title = str_replace(" ", "-", $title);
    $title = str_replace("/", "-", $title);
    $english_title = str_replace(" ", "-", $english_title);
    $english_title = str_replace("/", "-", $english_title);
    $name = rtrim($title, ' ');
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_title = 'Badge-Manifest-' . $name;
    $markets = $badgeobject['field_markets'];
    if ($badgeobject['field_badge_icon']) {
      $badge_icon = $badgeobject['field_badge_icon'];
      $mean_image_name = tng_convert_drupal_to_mean_filename($badge_icon, '', '', FALSE);
    }
    $badge_weight =  (int) $badgeobject['field_badge_weight'];
    $badge_description = $badgeobject['field_badge_description'];
    $badge_unearned_description = $badgeobject['field_badge_unearned_description'];
    $new_nid = tng_create_badge_manifest('badge_manifest', $manifest_title, $markets, $manifest_language, $nid, $mean_image_name, $badge_description, $badge_unearned_description, $badge_weight, $english_title);
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our badge, so we are not processing it.');
    }
  }
}

/**
 * @param $matchgame_values
 * @param $language
 * @param $nid
 * @return mixed
 */
function process_matchgame($matchgame_values, $language, $nid, $module, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('match game object');
    dpm($matchgame_values);
  }

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $renutriv_background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_matchgame = '] } ] } ] } ] } ]';
  $close_bare_match = '] }';

  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP flash page
  // and if we find between 1 and 20 fields, layout the page
  $min_matchgame_fields = 1;
  $max_matchgame_fields = 20;
  $num_fields = count($matchgame_values);

  //todo: we haven't implemented the feedback goodies yet, so let's set one and wait for Christian to implement it, then rework
  $correct_feedback = $matchgame_values['field_correct_feedback'];
  $incorrect_feedback = $matchgame_values['field_incorrect_feeback'];
  $content = '<p>Please pick the matches.</p>';

  if ($num_fields >= $min_matchgame_fields && $num_fields <= $max_matchgame_fields) {
    $title = $matchgame_values['title_field'];
    $title = str_replace(" ", "-", $title);
    if (isset($listobject['field_intro'])) {
      $instructional_text = $listobject['field_intro'];
    }
    if ($tng_debug == 1) {
      dpm('**title for matchgames**');
      dpm($title);
    }
    // we don't use the subtitle currently, but code for it in case we need it later.
    // $subtitle = matchgame_values['field_subtitle'];
    $feature_chunk = tng_npFeature_maker($module, '', '[]', '0.0.1');
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = 'Matchgame-Manifest-' . $title;
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'Manifest for matchgames.');
    $matchgame_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($renutriv_background_image, '', '', '', '', '', '', FALSE);
    $background_chunk = rtrim($background_chunk, ', ');
    $subtitle = $matchgame_values['field_subtitle'];
    $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
    $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', $subtitle, '', FALSE);
    $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $subtitle, '', FALSE);
    $whole_matchgame = '';
    if ($standalone == 1) {
      $whole_matchgame = $feature_chunk . $content_chunk . $matchgame_background . $background_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk;
    }

    if ($matchgame_values['field_match_collection']) {
      $matchgame_top = tng_npMatch_maker('', '1', $content, 'true', $correct_feedback, $incorrect_feedback);
      $whole_matchgame .= $matchgame_top;
      $all_of_them = $matchgame_values['field_match_collection'];
      $trim_str = trim($all_of_them, "\x5B \x7B \x5D \x7D");
      $sploder = explode('",', $trim_str);
      $count_of_elements = count($sploder);
      if ($tng_debug == 1) {
        dpm($sploder);
      }
      for ($i = 0; $i < $count_of_elements; $i += 3) {
        $bot_values[] = (explode('~', $sploder[$i], 2));
        $mid_values[] = (explode('~', $sploder[$i + 1], 2));
        $top_values[] = (explode('~', $sploder[$i + 2], 2));
      }
      // process the bottom, middle and top text or image match pairs
      $top_count = count($top_values);
      $page_wrapper = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);
      $whole_matchgame .= $page_wrapper;
      $row_maker = tng_npMatchRow_maker('', 'top', '');
      $whole_matchgame .= $row_maker;
      for ($k = 0; $k < $top_count; $k += 1) {
        if ($top_values[$k][0] == '"field_top_match_image" ') {
          $drupal_image_name = str_replace('"', '', $top_values[$k][1]);
          $mean_image_name = tng_convert_drupal_to_mean_filename($drupal_image_name, '', '', FALSE);
          $src_str = '<img src=\"' . $mean_image_name . '\"/>';
          $answer = tng_npMatchRowAnswer_maker('npAnswer', $src_str, $k + 1);
        } else {
          $answer = tng_npMatchRowAnswer_maker('npAnswer', str_replace('"', '', $top_values[$k][1]), $k + 1);
        }
        $whole_matchgame .= $answer;
      }
      $whole_matchgame = rtrim($whole_matchgame, ', ');
      $whole_matchgame .= $close_html;

      $mid_count = count($mid_values);
      $row_maker = tng_npMatchRow_maker('', 'middle', '');
      $whole_matchgame .= $row_maker;
      for ($k = 0; $k < $mid_count; $k += 1) {
        if ($mid_values[$k][0] == '"field_middle_match_image" ') {
          $drupal_image_name = str_replace('"', '', $mid_values[$k][1]);
          $mean_image_name = tng_convert_drupal_to_mean_filename($drupal_image_name, '', '', FALSE);
          $src_str = '<img src=\"' . $mean_image_name . '\"/>';
          $answer = tng_npMatchRowAnswer_maker('npAnswer', $src_str, $k + 1);
        } else {
          $answer = tng_npMatchRowAnswer_maker('npAnswer', str_replace('"', '', $mid_values[$k][1]), $k + 1);
        }
        $whole_matchgame .= $answer;
      }
      $whole_matchgame = rtrim($whole_matchgame, ', ');
      $whole_matchgame .= $close_html;

      $bot_count = count($bot_values);
      $row_maker = tng_npMatchRow_maker('', 'bottom', '');
      $whole_matchgame .= $row_maker;
      for ($k = 0; $k < $bot_count; $k += 1) {
        if ($bot_values[$k][0] == '"field_bottom_match_image" ') {
          $drupal_image_name = str_replace('"', '', $bot_values[$k][1]);
          $mean_image_name = tng_convert_drupal_to_mean_filename($drupal_image_name, '', '', FALSE);
          $src_str = '<img src=\"' . $mean_image_name . '\"/>';
          $answer = tng_npMatchRowAnswer_maker('npAnswer', $src_str, $k + 1);
        } else {
          $answer = tng_npMatchRowAnswer_maker('npAnswer', str_replace('"', '', $bot_values[$k][1]), $k + 1);
        }
        $whole_matchgame .= $answer;
      }
      if (($top_count == $mid_count) && ($mid_count == $bot_count)) {
        dpm('matching count are good');
      }
      $whole_matchgame = rtrim($whole_matchgame, ', ');
      $whole_matchgame .= $close_html;
      $whole_matchgame = rtrim($whole_matchgame, ', ');
    }

    if ($standalone == 1) {
      $whole_matchgame .= $close_matchgame;
    } else {
      //field_next_button == checkbox, field_next_button_label is the button label
      $create_button = $matchgame_values['field_next_button'];
      $button_label = $matchgame_values['field_next_button_label'];
      // the spanish word for next is 'siguiente'
      if ($create_button == 1) {
        if ($button_label) {
          $button_chunk = tng_npButton_maker('', 'btn-next', '', $button_label, $language);
        }
        $whole_matchgame .= $close_bare_match;
      } else {
        $whole_matchgame .= ']}]}';
      }
    }

    if ($tng_debug == 1) {
      dpm($whole_matchgame);
    }

    // when we edit a new node for a matchgame (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product
    $new_nid = tng_create_manifest_node($whole_matchgame, 'object_manifest', $manifest_title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;

  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our matchgame prioritize, so we are not processing it.');
    }
  }
}

/**
 * @param $object_values - is an array which holds all name/value pairs, for example 'field_difficulty : 1'
 * @param $language - the language specified by the node
 * @param $nid - id of the node we processed to get the array info in $object_values
 * @return mixed - return the node id, $nid, of the newly created manifest.
 */
function process_question_and_answer($object_values, $language, $nid, $standalone = NULL)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('**language**' . $language);
    dpm('process question and answer');
    dpm($object_values);
  }
  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 10 fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 20;
  $num_fields = count($object_values);
  $difficulty = $object_values['field_difficulty'];
  $required = $object_values['field_is_required'];
  $instructional_text = '';
  //$forced = $object_values['field_forced'];

  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    // here we process the fields we find for our question and answer passed in the array of $object_values
    //  start by telling the processor how many fields we found
    $title = $object_values['title_field'];
    $title = str_replace(" ", "-", $title);
    $instruct = $object_values['field_intro'];
    if (isset($instruct)) {
      $instructional_text = $object_values['field_intro'];
    }
    $subtitle = $object_values['field_subtitle'];
    if ($tng_debug == 1) {
      dpm('Question and Answer had ' . $num_fields . ' fields.');
      dpm('title : ' . $title);
    }
    $page_chunk = tng_npPageStart_maker($nid, '', '', '', '', $instructional_text);

    $whole_qa = $page_chunk;
    $ba = '';
    $img = '';
    $with_image = false;
    $correct_answer_text = '';
    $incorrect_answer_text = '';
    // paragraphs are
    foreach ($object_values as $key => $value) {
      if ($tng_debug == 1) {
        dpm('**** data ****' . $key . ' : ' . $value);
      }
      if ($key == 'field_paragraph_multiple_choice') {
        // remove brackets and curly braces [] {}
        $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
        $sploder = explode('",', $trim_str);
        if (strpos($sploder[1], 'field_question_image') != false) {
          $with_image = true;
        }
        if ($tng_debug == 1) {
          dpm($sploder);
        }
        $count_of_elements = count($sploder);

        // for each pair, grab the data and package it for npQuestion, npAnswer
        for ($i = 0; $i < $count_of_elements; $i++) {
          $name_value = $sploder[$i];
          if (strpos($name_value, 'field_question_image') !== FALSE) {
            $img_str_size = strlen($name_value);
            if ($img_str_size > 27) {
              $img = tng_value_from_pair($sploder[$i]);
              $with_image = true;
            }
          }  elseif (strpos($sploder[$i], 'field_question_text') !== FALSE) {
            $q = tng_value_from_pair($sploder[$i]);
            $question_text = $q;
          } elseif (strpos($sploder[$i], 'field_answer_feedback') !== FALSE) {
            // if we have an image it's the first time through account for the offset
            if ($with_image && $i == 0) {
              $answer_feedback = tng_value_from_pair($sploder[$i]);
              $answer_feedback = preg_replace('/\s+/S', " ", $answer_feedback);
              $answer_feedback = str_replace('"', '\"', $answer_feedback);
              $answer_text = tng_value_from_pair($sploder[$i + 2]);
              $answer_text = preg_replace('/\s+/S', " ", $answer_text);
              $answer_text = str_replace('"', '\"', $answer_text);
              $answer_correctness = tng_value_from_pair($sploder[$i + 3]);
              $answer_correctness = preg_replace('/\s+/S', " ", $answer_correctness);
              $answer_correctness = str_replace('"', '\"', $answer_correctness);
              $with_image = false;
            } else {
              $answer_feedback = tng_value_from_pair($sploder[$i]);
              $answer_feedback = preg_replace('/\s+/S', " ", $answer_feedback);
              $answer_feedback = str_replace('"', '\"', $answer_feedback);
              $answer_text = tng_value_from_pair($sploder[$i + 1]);
              $answer_text = preg_replace('/\s+/S', " ", $answer_text);
              $answer_text = str_replace('"', '\"', $answer_text);
              $answer_correctness = tng_value_from_pair($sploder[$i + 2]);
              $answer_correctness = preg_replace('/\s+/S', " ", $answer_correctness);
              $answer_correctness = str_replace('"', '\"', $answer_correctness);
          }
            if ($answer_correctness == 1) {
              $ap = tng_npAnswer_maker($answer_text, 'true', $answer_feedback, '');
              $correct_answer_text = $answer_feedback;
            } else {
              $ap = tng_npAnswer_maker($answer_text, 'false', '', $answer_feedback);
              $incorrect_answer_text = $answer_feedback;
            }
            $ba .= $ap;
          }
        }

        // refactor this after we see it in use with multiple Q's and A's
        if ($standalone != 1) {
          //field_next_button == checkbox, button labels are handled in the button code for en/es/frca
          $create_button = $object_values['field_next_button'];
          $submit_button = $object_values['field_create_submit_button'];
          if ($create_button == 1) {
            $bt = tng_npButton_maker('', 'btn-next', '', '', $language);
            $bt = rtrim($bt, ' ,');
          }
        }
        if ($submit_button == 1) {
          $immediate_value = 'false';
        } else {
          $immediate_value = 'true';
        }
        $np = tng_npQuestion_maker('true', 'false', 'checkbox', $difficulty, $question_text, $immediate_value, $correct_answer_text, $incorrect_answer_text, $language, $img);
        //pre pend since we built the question after the answers
        $ba = $np . $ba;

        // remove the final comma from any number of question/multiple answers bits
        $ba = rtrim($ba, ',');
        //with a button on the set, we have a different, but happy ending
        if ($create_button == 1) {
          $ba = '{' . $ba . ']},';
        } else {
          $ba = '{' . $ba . ']}';
        }
        $whole_qa .= $ba;
      } elseif ($key == 'field_answer_image') {
        $truth = tng_convert_drupal_to_mean_filename($value, '', '');
        $image_chunk = tng_npImage_maker('', $truth, '', '');
        $whole_qa .= $image_chunk;
      }
    }
    $finish_chunk = $bt . ']}';
    $whole_qa .= $finish_chunk;
    // since we are processing partial np objects for Q & A, let's make this title a manifest title
    $title = 'Q-and-A-Manifest-' . $title;

    // when we edit a new node for a question-answer (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product or list or ...
    $new_nid = tng_create_manifest_node($whole_qa, 'object_manifest', $title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our question and answer, so we are not processing it.');
    }
  }
}

/**
 * @param $object_values - is an array which holds all name/value pairs, for example 'field_difficulty : 1'
 * @param $language - the language specified by the node
 * @param $nid - id of the node we processed to get the array info in $object_values
 * @return mixed - return the node id, $nid, of the newly created manifest.
 */
function process_trivia($object_values, $language, $nid)
{
  $tng_debug =0;
  if ($tng_debug == 1) {
    dpm('**language**' . $language);
    dpm('process trivia');
    dpm($object_values);
  }
  //create an npFeature, npContent, npPage, and multiple npHTML chunks to make a NP product page
  // and if we find between 1 and 10 fields, layout the page
  $min_product_fields = 1;
  $max_product_fields = 20;
  $num_fields = count($object_values);
  $difficulty = $object_values['field_difficulty'];
  $required = $object_values['field_is_required'];

  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    // here we process the fields we find for our trivia and answer passed in the array of $object_values
    //  start by telling the processor how many fields we found
    $title = $object_values['title_field'];
    $title = str_replace(" ", "-", $title);
    if (isset($object_values['field_intro'])) {
      $instructional_text = $object_values['field_intro'];
    }
    $subtitle = $object_values['field_subtitle'];
    if ($tng_debug == 1) {
      dpm('Trivia had ' . $num_fields . ' fields.');
      dpm('title : ' . $title);
    }
    $page_chunk = tng_npPageStart_maker($nid, '', $title, 'true', 'true', $instructional_text);

    $whole_qa = $page_chunk;
    $ba = '';
    $correct_answer_text = '';
    $incorrect_answer_text = '';
    //$whole_qa =  $whole_qa . $page_chunk;
    // paragraphs are
    foreach ($object_values as $key => $value) {
      if ($tng_debug == 1) {
        dpm('**** data ****' . $key . ' : ' . $value);
      }
      if ($key == 'field_paragraph_multiple_choice') {
        // remove brackets and curly braces [] {}
        $trim_str = trim($value, "\x5B \x7B \x5D \x7D");
        $sploder = explode('",', $trim_str);
        if ($tng_debug == 1) {
          dpm($sploder);
        }
        $count_of_elements = count($sploder);
        // for each pair, grab the data and package it for npQuestion, npAnswer
        for ($i = 0; $i < $count_of_elements; $i++) {
          if (strpos($sploder[$i], 'field_question_text') !== FALSE) {
            $q = tng_value_from_pair($sploder[$i]);
            $question_text = $q;
          } elseif (strpos($sploder[$i], 'field_answer_feedback') !== FALSE) {
            $answer_feedback = tng_value_from_pair($sploder[$i]);
            $answer_feedback = preg_replace('/\s+/S', " ", $answer_feedback);
            $answer_feedback = str_replace('"', '\"', $answer_feedback);
            $answer_text = tng_value_from_pair($sploder[$i + 1]);
            $answer_text = preg_replace('/\s+/S', " ", $answer_text);
            $answer_text = str_replace('"', '\"', $answer_text);
            $answer_correctness = tng_value_from_pair($sploder[$i + 2]);
            $answer_correctness = preg_replace('/\s+/S', " ", $answer_correctness);
            $answer_correctness = str_replace('"', '\"', $answer_correctness);
            if ($answer_correctness == 1) {
              $ap = tng_npAnswer_maker($answer_text, 'true', $answer_feedback, '');
              $correct_answer_text = $answer_feedback;
            } else {
              $ap = tng_npAnswer_maker($answer_text, 'false', '', $answer_feedback);
              $incorrect_answer_text = $answer_feedback;
            }
            $ba .= $ap;
          }
        }
        $bt = tng_npButton_maker('', 'btn-next', '', '', $language);
        // until Kory fixes the npAnswer to override the correct and incorrect text in each question we build the question after the answers
        $np = tng_npQuestion_maker($required, 'true', 'checkbox', $difficulty, $question_text, 'true', $correct_answer_text, $incorrect_answer_text, $language);
        //pre pend since we built the question after the answers
        //$ba =  $np . $ba . $bt;
        $ba = $np . $ba;

        // remove the final comma from any number of question/multiple answers bits
        $ba = rtrim($ba, ',');
        //and complete the component started in the npComponent
        $ba = '{' . $ba . ']},';
        $whole_qa .= $ba;
      } elseif ($key == 'field_answer_image') {
        $truth = tng_convert_drupal_to_mean_filename($value, '', '');
        $image_chunk = tng_npImage_maker('', $truth, '', '');
        $whole_qa .= $image_chunk;
      }
    }
    $finish_chunk = $bt . ']' . '}';
    $whole_qa .= $finish_chunk;
    // since we are processing partial np objects for Q & A, let's make this title a manifest title
    $title = 'Trivia-Manifest - ' . $title;

    // when we edit a new node for a trivia (or make it for the first time), create a new object_manifest
    // to create an updated manifest, delete the old manifest and re-edit the product or list or ...
    $new_nid = tng_create_manifest_node($whole_qa, 'object_manifest', $title, $subtitle, '', $language, $nid, '', '', '', '', '', '', '', '', '');
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our trivia, so we are not processing it.');
    }
  }
}

function process_content_object($object_values, $language, $nid)
{
  $tng_debug =0;
  $min_product_fields = 1;
  $max_product_fields = 50;
  $num_fields = count($object_values);

  $bg_newplayer_background = 'newplayer-background';
  $outside_padding = 'outside-padding';
  $renutriv_logo_image = 'renutriv-logo-image';
  $background_image = 'background-image';
  $h3_headline = 'h3 headline';
  $close_html = '] },';
  $close_contentobject = '] } ] } ] } ]';
  $story_default = 'storyDefault';
  $story_bethsblog = 'storyBethsBlog';
  $final_exam = false;
  $featured_content = false;
  $featured_content_image = '';
  $object_weight = $object_values['field_order_weight'];
  // need to find out how many learning objects there are that we care about for scoring
  $number_of_questions = 0;
  foreach ($object_values as $key => $value) {
    if ($key == 'field_learning_objects') {
      // npDragAndDropSelect, npQuestion (npTrivia has npQuestions in it)
      $num_learning_objs = count($value);
      $num_with_qa_or_ds = 0;
      for ($i=0; $i < $num_learning_objs; $i++) {
        $has_question = strpos($value[$i], 'npQuestion');
        $has_dragandselect = strpos($value[$i], 'npDragAndDropSelect');
        if ($has_question > 0 || $has_dragandselect > 0) {
          $number_of_questions += 1;
        }
      }
    }
  }

  if ($num_fields >= $min_product_fields && $num_fields <= $max_product_fields) {
    // here we process the fields we find for our hot spot passed in the array of $object_values
    //  start by telling the processor how many fields we found
    $title = $object_values['title_field'];
    if ($object_values['field_featured'] == 1) {
      $featured_content = true;
      $featured_c = $object_values['field_featured_image'];
      if (strlen($featured_c) > 0)
      {
        $featured_content_image = tng_convert_drupal_to_mean_filename($featured_c);
      }
    }
    if ($tng_debug == 1) {
      dpm('Content Object had ' . $num_fields . ' fields.');
      dpm('**language**' . $language);
      dpm('object values from process_content_object');
      dpm($object_values);
      dpm('title : ' . $title);
      dpm('featured content was checked, image is:');
      dpm($featured_content_image);
    }
    $learning_category = rtrim($object_values['field_learning_category'], ',');
    if ($learning_category == 'Re-Nutriv') {
      $learning_category_id = 'reNutriv';
    }
    elseif ($learning_category == 'ANR') {
      $learning_category_id = 'ANR';
    }
    elseif ($learning_category == 'ANR2') {
      $learning_category_id = 'ANR2';
    }
    elseif ($learning_category == 'GMTC') {
      $learning_category_id = 'GMTC';
    }
    elseif ($learning_category == 'BSFL') {
      $learning_category_id = 'BSFL';
    }
    elseif ($learning_category == 'ND') {
      $learning_category_id = 'ND';
    }
    elseif ($learning_category == 'Holiday') {
      $learning_category_id = 'holiday';
    }
    elseif ($learning_category == 'ND2') {
      $learning_category_id = 'ND2';
    }
    elseif ($learning_category == 'SP') {
      $learning_category_id = 'SP';
    }
    elseif ($learning_category == 'FP') {
      $learning_category_id = 'FP';
    }
    else {
      //diaries are a special form of story so default it if none is given
      $learning_category_id = 'np_diaryND';
    }

    $story_type = $object_values['field_story_type'];
    $story_type = str_replace(',', '', $story_type);
    if ($story_type == 'Pulsed Content') {
      $pulsed_content_type = $object_values['field_pulsed_content'];
      $pulsed_content_type = str_replace(',', '', $pulsed_content_type);
      $pulsed_content_type = str_replace('’', '', $pulsed_content_type);
      // Beth's Blog has a signature, others not
      if ($pulsed_content_type == "Beths Blog") {
        $beth_blog = true;
      }
    }

    $content_object_type = rtrim($object_values['field_content_object_type'], ',');
    // assume we are making a Learning Object as the default
    $making_story = false;
    if ($content_object_type == 'Learning Content') {
      $content_object_prefix = 'Learning-Content-';
      $field_learning_template = $object_values['field_learning_template'];
      if ($field_learning_template == 'popquiz' || $field_learning_template == 'trivia' || $field_learning_template == 'drag_select') {
        $percentage_required_to_pass = $object_values['field_percentage_requirement'];
        $field_final_exam = $object_values['field_final_exam'];
        $content_object_prefix = 'Learning-Content-';
      }
    } else if ($content_object_type == 'Story') {
      $content_object_prefix = 'Story-'; // . $pulsed_content_type;
      $making_story = true;
    }

    $num_mkts = count($object_values['field_markets']);
    $markets = $object_values['field_markets'];
    if ($tng_debug == 1) {
      dpm($markets);
      dpm('number of markets found:');
      dpm($num_mkts);
    }
    $content_object_points = $object_values['field_point_value'];
    $content_keywords = $object_values['field_tags_keywords'];
    $intro_text = strip_tags($object_values['field_intro']);
    $pass_text = '';
    $headline = $object_values['field_headline'];
    if ($making_story) {
      if ($beth_blog) {
        $feature_chunk = tng_npFeature_maker($story_bethsblog, '', '[]', '0.0.1');
      } else {
        $feature_chunk = tng_npFeature_maker($story_default, '', '[]', '0.0.1');
      }
    } else {
      $feature_chunk = tng_npFeature_maker($learning_category_id, '', '[]', '0.0.1');
    }
    //language specific code here, we can only handle english, traditional and simplified chinese, if none of these default to english
    $language_strings = make_language_strings($language);
    $manifest_language = $language_strings[0];
    $manifest_content = $language_strings[1];
    $manifest_title = $content_object_prefix . str_replace(" ", "-", $title);
    $newplayer_api_link = '/api/contents/name/' . $manifest_title;
    $thumbnail_teaser = tng_convert_drupal_to_mean_filename($object_values['field_hero_image'], 'teaser', TRUE);
    $content_chunk = tng_npContent_maker($manifest_content, $manifest_language, $manifest_title, 'This manifest creates a Story or Learning Object content object .');
    $quiz_chunk = '';
    if (!empty($field_final_exam)) {
      switch ($field_learning_template) {
        case 'popquiz':
        case 'trivia':
        case 'drag_select':
          $quiz_chunk = ',' . tng_npQuiz_maker($nid, 'assessment', $field_final_exam, $number_of_questions, $percentage_required_to_pass, 'true', 'false');
          $final_exam = true;
          break;
      }
    }

    $newplayer_background = tng_npHTML_basic_maker($bg_newplayer_background, '', '', '', '', '', '', TRUE);
    $background_chunk = tng_npHTML_basic_maker($background_image, '', '', '', '', '', '', FALSE);

    $hero_image_chunk = '';
    $background_chunk = rtrim($background_chunk, ', ');
    // headline is a required field for a CO, but not a story. same for the instructions text.
    $introductory_text = $object_values['field_intro'];
    if ($making_story) {
      $headline_chunk = '';
      $instructions_chunk = '';
      $subtitle_chunk = tng_npHTML_basic_maker('', 'background-brand-primary-light outside-padding', '', '', '', '', '', TRUE);
      $html_logo_chunk = '';
    } else {
      $headline_chunk = tng_npHTML_basic_maker('', $h3_headline, '', '', '', $headline, '', FALSE);
      $instructions_chunk = tng_npHTML_basic_maker('', 'h6 instructional', '', '', '', $introductory_text, '', FALSE);
      if ($final_exam) {
        $instructions_chunk = rtrim($instructions_chunk, ' ,');
        $pass_text = $object_values['field_exam_pass_feedback'];
        $fail_text = $object_values['field_exam_fail_feedback'];
        $pass_content = $object_values['field_exam_pass_content'];
        $perfect_content = $object_values['field_exam_perfect_content'];
      }
      $subtitle_chunk = tng_npHTML_basic_maker('', $outside_padding, '', '', '', '', '', TRUE);
      $html_logo_chunk = tng_npHTML_basic_maker('', $renutriv_logo_image, '', '', '', '', '', FALSE);
    }
    $whole_object = $feature_chunk . $content_chunk . $newplayer_background . $background_chunk  . $hero_image_chunk . $close_html . $subtitle_chunk . $html_logo_chunk . $headline_chunk . $instructions_chunk . $quiz_chunk;

    if (!empty($object_values['field_learning_objects'])) {
      $value = $object_values['field_learning_objects'];
      $lo_count = count($value);
      $combo = '';
      if (isset($field_learning_template) && $field_learning_template == 'trivia') {
        $trivia_chunk = tng_npTrivia_maker('false', 'false', '1', 'Trivia content piece', 'true','That\'s right', 'That\'s not right');
      }
      foreach ($value as $mod_learn) {
        if ($tng_debug == 1) {
          dpm('learning objects');
          dpm($mod_learn);
        }
        if (!empty($field_final_exam)) {
          switch ($field_learning_template) {
            case 'popquiz':
              $mod_learn = str_replace('npQuestion', 'npAsQuestion', $mod_learn);
              $mod_learn = str_replace('npAnswer', 'npAsAnswer', $mod_learn);
              break;
            case 'trivia':
              $mod_learn = str_replace('npQuestion', 'npAsQuestion', $mod_learn);
              $mod_learn = str_replace('npAnswer', 'npAsAnswer', $mod_learn);
              $comp_start = strpos($mod_learn, '"components": [ {"type"');
              // crispy code here, assuming the components model doesn't change.
              $comp_start += 16;
              $submatch = substr($mod_learn, $comp_start);
              $mod_learn = $trivia_chunk . $submatch. ']}';
              break;
          }
        }
        $combo .= $mod_learn . ',';
      }
      $whole_object .= $combo;
      if (!empty($field_final_exam)) {
        switch ($field_learning_template) {
          case 'trivia':
            $trivia_chunk = rtrim($trivia_chunk, ', ');
            $whole_object .= tng_npAsResult_maker($pass_text, $fail_text, $pass_content, $perfect_content);
            break;
          case 'popquiz':
          case 'drag_select':
            $whole_object .= tng_npAsResult_maker($pass_text, $fail_text, $pass_content, $perfect_content);
            break;
        }
      }
    }

    // after looping the HTML or Image group, remove the final ','
    $whole_object = rtrim($whole_object, ' ,');
    $whole_object .= $close_contentobject;
    if ($final_exam) {
      $whole_object .= '} ]';
    }
    $new_nid = tng_create_manifest_node($whole_object, 'object_manifest', $manifest_title, '', $markets, $language, $nid, '', $thumbnail_teaser, $newplayer_api_link, $headline, '', $content_keywords, $content_object_points, $final_exam, $featured_content, $object_weight, $featured_content_image);
    // return the new nid to set it on the parent node
    return $new_nid;
  } else {
    if ($tng_debug == 1) {
      dpm('Received more or less items than we expected for our content object, so we are not processing it.');
    }
  }
}

/**
 * @param $node_data - this is the full manifest to save on a separate node
 * @param $node_type - the type of node we are creating
 * @param $node_title - the title of the node
 * @param $node_language - not used currently due to bug
 * @param $nid - if this id is passed we won't make a new one, if not set create one
 * @return mixed - the nid is returned
 */
function tng_create_manifest_node($node_data, $node_type, $node_title, $node_subtitle, $markets = NULL, $node_language, $nid = NULL, $node_display_title = NULL, $node_thumbnail_link = NULL, $node_newplayer_link = NULL, $node_display_text = NULL, $node_categories = NULL, $node_keywords = NULL, $node_points = NULL, $node_final = NULL, $node_featured = NULL, $node_weight = NULL, $node_featured_image = NULL)
{
  global $user;
  $tng_debug =0;
  if ($node_final == null) {
    $node_final = 0;
  }
  if ($node_featured == null) {
    $node_featured = 0;
  }
  // create a new manifest here
  if (!isset($nid)) {
    if ($tng_debug == 1) {
      dpm('creating a new nid node manifest');
      dpm('node data : ' . $node_data);
      dpm('node type : ' . $node_type);
      dpm('node title : ' . $node_title);
      dpm('node subtitle : ' . $node_subtitle);
      dpm('node markets : ' . $markets);
      dpm('node language : ' . $node_language);
      dpm('node nid : ' . $nid);
      dpm('node display title : ' . $node_display_title);
      dpm('node thumbnail link : ' . $node_thumbnail_link);
      dpm('node newplayer link : ' . $node_newplayer_link);
      dpm('node display text : ' . $node_display_text);
      dpm('node categories : ' . $node_categories);
      dpm('node keywords : ' . $node_keywords);
      dpm('node points : ' . $node_points);
      dpm('node final exam : ' . $node_final);
      dpm('node featured : ' . $node_featured);
      dpm('node weight : ' . $node_weight);
      dpm('node featured image : ' . $node_featured_image);
    }
    $node = new stdClass();
    $node->title = $node_title;
    // markets needs to be added to our manifest, so create a csv list
    $market_csv = '';
    if (!empty($markets)) {
      $market_csv .= implode(',', $markets);
    }
    if ($tng_debug == 1) {
      dpm('whole market');
      dpm($market_csv);
    }
    $node->type = $node_type;
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    //language will not be set on the manifest but each manifest contains language specific goods
    //this feels like a bug, but we work around not being able to create manifest with languages by setting manifest language to LANGUAGE_NONE
    //otherwise it will create a node with no body content, see the process_product function for more on language setting
    $node->language = LANGUAGE_NONE;
    $node->field_manifest_markets[$node->language][] = array(
      'value' => $market_csv,
      'format' => 'plain_text',
    );

    $node->field_manifest_counter[$node->language][] = array(
      'value' => '0',
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'language' we save it separately in a new field
    $node->field_manifest_language[$node->language][] = array(
      'value' => $node_language,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'thumbnail link' we save it separately in a new field
    $node->field_thumbnail_link[$node->language][] = array(
      'value' => $node_thumbnail_link,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'display text' we save it separately in a new field
    $node->field_intro_text[$node->language][] = array(
      'value' => $node_display_text,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'display title' we save it separately in a new field
    $node->field_product_name[$node->language][] = array(
      'value' => $node_display_title,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'display title' we save it separately in a new field
    $node->field_manifest_subtitle[$node->language][] = array(
      'value' => $node_subtitle,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'newplayer link' we save it separately in a new field
    //http://localhost:3000/api/products/name/Product-Manifest-Advanced-Night-Repair-Eye-Synchronized-Complex-II
    $node->field_newplayer_link[$node->language][] = array(
      'value' => $node_newplayer_link,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'categories link' we save it separately in a new field
    //http://localhost:3000/api/products/name/Product-Manifest-Advanced-Night-Repair-Eye-Synchronized-Complex-II
    $node->field_manifest_categories[$node->language][] = array(
      'value' => $node_categories,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'keywords' we save it separately in a new field
    $node->field_manifest_keywords[$node->language][] = array(
      'value' => $node_keywords,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'points' we save it separately in a new field
    $node->field_point_value[$node->language][] = array(
      'value' => $node_points,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'final exam' we save it separately in a new field
    $node->field_final_exam[$node->language][] = array(
      'value' => $node_final,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'feature' we save it separately in a new field
    $node->field_featured[$node->language][] = array(
      'value' => $node_featured,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'weight' we save it separately in a new field
    $node->field_manifest_weight[$node->language][] = array(
      'value' => $node_weight,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'featured content image' we save it separately in a new field
    $node->field_manifest_featured_image[$node->language][] = array(
      'value' => $node_featured_image,
      'format' => 'plain_text',
    );

    //$node->language = $node_language; // unfortunately this doesn't work
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

    $node->body[$node->language][] = array(
      'value' => $node_data,
      'format' => 'plain_text',
    );

    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    if ($tng_debug == 1) {
      dpm($node);
    }
    return $node->nid;
    // we already have a manifest, so update it with new data
  } else {
    $market_csv = '';
    if (!empty($markets)) {
      $market_csv .= implode(',', $markets);
    }

    if ($tng_debug == 1) {
      dpm('whole market');
      dpm($market_csv);
    }
    $node = node_load($nid);
    $node->body[LANGUAGE_NONE][0]['value'] = $node_data;
    $node->type = $node_type;
    $node->title = $node_title;
    $node->field_product_name[LANGUAGE_NONE][0]['value'] = $node_display_title;
    $node->field_manifest_subtitle[LANGUAGE_NONE][0]['value'] = $node_subtitle;
    $node->field_manifest_markets[LANGUAGE_NONE][0]['value'] = $market_csv;
    $node->field_manifest_language[LANGUAGE_NONE][0]['value'] = $node_language;
    $node->field_intro_text[LANGUAGE_NONE][0]['value'] = $node_display_text;
    $node->field_thumbnail_link[LANGUAGE_NONE][0]['value'] = $node_thumbnail_link;
    $node->field_newplayer_link[LANGUAGE_NONE][0]['value'] = $node_newplayer_link;
    $node->field_manifest_categories[LANGUAGE_NONE][0]['value'] = $node_categories;
    $node->field_manifest_keywords[LANGUAGE_NONE][0]['value'] = $node_keywords;
    $node->field_point_value[LANGUAGE_NONE][0]['value'] = $node_points;
    $node->field_final_exam[LANGUAGE_NONE][0]['value'] = $node_final;
    $node->field_featured[LANGUAGE_NONE][0]['value'] = $node_featured;
    $node->field_manifest_weight[LANGUAGE_NONE][0]['value'] = $node_weight;
    $node->field_manifest_featured_image[LANGUAGE_NONE][0]['value'] = $node_featured_image;
    node_save($node);
    return $node->nid;
  }
}


function tng_create_badge_manifest($node_type, $node_title, $markets = NULL, $node_language, $nid = NULL, $node_badge_icon = NULL, $node_badge_description = NULL, $node_badge_unearned_description = NULL, $node_badge_weight = NULL, $node_badge_english_title = NULL)
{

  global $user;
  $tng_debug =0;

  // don't make a new manifest node if we already have one
  if (!isset($nid)) {
    if ($tng_debug == 1) {
      dpm('creating a new nid node manifest');
      dpm('node type : ' . $node_type);
      dpm('node title : ' . $node_title);
      dpm('node markets : ' . $markets);
      dpm('node language : ' . $node_language);
      dpm('node nid : ' . $nid);
      dpm('node badge icon : ' . $node_badge_icon);
      dpm('node badge description : ' . $node_badge_description);
      dpm('node badge unearned description : ' . $node_badge_unearned_description);
      dpm('node badge weight : ' . $node_badge_weight);
      dpm('node badge english title : ' . $node_badge_english_title);
    }
    $node = new stdClass();
    $node->title = $node_title;
    //$node->field_original_engbadge_title = $node_badge_english_title;
    // markets needs to be added to our manifest, so create a csv list
    $cnt_markets = count($markets);
    $market_csv = '';
    for ($c = 0; $c < $cnt_markets; $c++) {
      $market_csv .= $markets[$c] . ',';
    }
    if (isset($market_csv)) {
      $market_csv = rtrim($market_csv, ', ');
    }
    if ($tng_debug == 1) {
      dpm('whole market');
      dpm($market_csv);
    }
    $node->type = $node_type;
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    //language will not be set on the manifest but each manifest contains language specific goods
    //this feels like a bug, but we work around not being able to create manifest with languages by setting manifest language to LANGUAGE_NONE
    //otherwise it will create a node with no body content, see the process_product function for more on language setting
    $node->language = LANGUAGE_NONE;
    $node->field_manifest_markets[$node->language][] = array(
      'value' => $market_csv,
      'format' => 'plain_text',
    );

    // since we can't save a manifest node with a 'language' we save it separately in a new field
    $node->field_language[$node->language][] = array(
      'value' => $node_language,
      'format' => 'plain_text',
    );

    $node->field_badge_image[$node->language][] = array(
      'value' => $node_badge_icon,
      'format' => 'plain_text',
    );

    $node->field_badge_description[$node->language][] = array(
      'value' => $node_badge_description,
      'format' => 'plain_text',
    );

    $node->field_badge_unearned_description[$node->language][] = array(
      'value' => $node_badge_unearned_description,
      'format' => 'plain_text',
    );

    $node->field_badge_weight[$node->language][] = array(
      'value' => $node_badge_weight,
      'format' => 'integer',
    );

    $node->field_original_engbadge_title[$node->language][] = array(
      'value' => $node_badge_english_title,
      'format' => 'plain_text',
    );

    //$node->language = $node_language; // unfortunately this doesn't work
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write


    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    if ($tng_debug == 1) {
      dpm($node);
    }
    return $node->nid;
  } else {
    // markets needs to be added to our manifest, so create a csv list
    $cnt_markets = count($markets);
    $market_csv = '';
    for ($c = 0; $c < $cnt_markets; $c++) {
      $market_csv .= $markets[$c] . ',';
    }
    if (isset($market_csv)) {
      $market_csv = rtrim($market_csv, ', ');
    }
    if ($tng_debug == 1) {
      dpm('whole market');
      dpm($market_csv);
    }

    $node = node_load($nid);
    $node->type = $node_type;
    $node->title = $node_title;
    $node->field_original_engbadge_title[LANGUAGE_NONE][0]['value'] = $node_badge_english_title;
    $node->field_manifest_markets[LANGUAGE_NONE][0]['value'] = $market_csv;
    $node->field_language[LANGUAGE_NONE][0]['value'] = $node_language;
    $node->field_badge_image[LANGUAGE_NONE][0]['value'] = $node_badge_icon;
    $node->field_badge_description[LANGUAGE_NONE][0]['value'] = $node_badge_description;
    $node->field_badge_unearned_description[LANGUAGE_NONE][0]['value'] = $node_badge_unearned_description;
    $node->field_badge_weight[LANGUAGE_NONE][0]['value'] = (int) $node_badge_weight;
    node_save($node);
    return $node->nid;
  }
}


/**
 * @param $value - full pathname of the local drupal image file
 * @return string - return the path which we will expect on the MEAN server side 'assets + stylepath'
 */
function tng_convert_drupal_to_mean_filename($value, $thumb_type = NULL, $make_thumbnail = NULL, $public_process = NULL)
{
  $tng_debug =0;
  $remote_picture_name = '';
  //short circuit this if there isn't a system path
  if (substr($value, 0, 6) == 'assets') {
    return $value;
  }
  if ($public_process) {
    $justpath = parse_url($value);
    $justpath['path'] = trim($justpath['path'], ' ');
    $pub_image = str_replace('public://', '', $justpath);
    $remote_picture_name = 'assets/' . $pub_image['path'];
  } else {
    $justpath = parse_url($value, PHP_URL_PATH);
    // if we want a thumbnail make it
    if ($make_thumbnail == TRUE) {
      if ($thumb_type == 'teaser') {
        $justpath = str_replace('product_detail', 'teaser_thumbnail', $justpath);
      } else if ($thumb_type == 'archive') {
        $justpath = str_replace('product_detail', 'archive_thumbnail', $justpath);
      } else if ($thumb_type == 'tile') {
        $justpath = str_replace('product_detail', 'tile_thumbnail', $justpath);
      }
    }
    //bizarre image string case for badge icons: strange path due to svg image -- can't style them
    $needle = "/default/files/styles//public/";
    $match = strpos($justpath, $needle);
    if ($match > 0) {
      $match = strpos($justpath, $needle);
      $match += strlen($needle);
      $submatch = substr($justpath, $match);
      $remote_picture_name = 'assets/' . $submatch;
    } else {
      $needle = "/sites/default/files/";
      $match += strlen($needle);
      $submatch = substr($justpath, $match);
      $remote_picture_name = 'assets/' . $submatch;
    }

    if ($tng_debug == 1) {
      dpm('***incoming path');
      dpm($value);
      dpm('***path value***' . $justpath);
      dpm('***index***' . $match);
      dpm('sub match');
      dpm($submatch);
      dpm('remote picture name');
      dpm($remote_picture_name);
    }
  }
  return $remote_picture_name;
}

/**
 * Implements hook_node_presave().
 */
function tng_shadow_node_presave($node) {
  switch ($node->type) {
    case 'object_manifest':
    case 'badge_manifest':
      break;
    default:
      // Set language for all fields.
      $handler = entity_translation_get_handler('node', $node);
      $langcode = $handler->getFormLanguage();
      if (!empty($langcode)) {
        $handler->setTranslation(array('language' => $langcode, 'status' => 1));
        $translations = $handler->getTranslations();
        if (empty($translations->original)) {
          $handler->setOriginalLanguage($langcode);
        }
        if ($translations->original != LANGUAGE_NONE && $handler->initOriginalTranslation()) {
          foreach (field_info_instances('node', $node->type) as $instance) {
            $field_name = $instance['field_name'];
            $field = field_info_field($field_name);
            if ($field['translatable']) {
              foreach ($node->{$field_name} as $langcode => $value) {
                if (!isset($translations->data[$langcode]) && empty($node->{$field_name}[$langcode])) {
                  unset($node->{$field_name}[$langcode]);
                }
              }
            }
          }
          field_attach_presave('node', $node);
        }
      }
      break;
  }
}

/**
 * Implements hook_entity_translation_insert().
 */
function tng_shadow_entity_translation_insert($entity_type, $entity, $translation, $values = array()) {
  if ($entity_type == 'node' && $translation['status']) {
    switch ($entity->type) {
      case 'object_manifest':
      case 'badge_manifest':
        break;
      default:
        _tng_shadow_generate_manifest($entity, $translation['language']);
        break;
    }
  }
}

/**
 * Implements hook_entity_translation_update().
 */
function tng_shadow_entity_translation_update($entity_type, $entity, $translation, $values = array()) {
  if ($entity_type == 'node') {
    switch ($entity->type) {
      case 'object_manifest':
      case 'badge_manifest':
        break;
      default:
        if ($translation['status'] || !empty($entity->field_manifest[$translation['language']])) {
          _tng_shadow_generate_manifest($entity, $translation['language']);
        }
        break;
    }
  }
}

/**
 * @param $node - This view entity is passed from the shadow module to construct
 * a valid JSON object that the NewPlayerV2 can consume. We process the
 * paragraph portion since shadowed entities does not.
 *
 * We loop through the 'field_xyz' pieces which came from field_info_instances
 * element_children.
 *
 * for (each field we find)
 *   go through each element child and look for a paragraph type
 *     if (it is a paragraph)
 *       loop through it to find all pairs of questions and possible multiple
 *       answers
 *       note this information in the premanifest object
 *     else
 *       note the node and data in our premanifest object
 * end
 */
function _tng_shadow_generate_manifest($node, $language) {
  $translated_labels[] = '';
  // for full manifest creation, set the module name here, default will be reNutriv
  $module_name = 'reNutriv';
  global $namevalue;
  $pre_manifest = array();
  // load the current entity in a wrapper
  $wrapper = entity_metadata_wrapper('node', $node);
  // field_info_instances holds the field values at the outermost level
  // paragraph types must be explored more, 'regular' value fields are written as is.
  $node_fields = field_info_instances('node', $node->type);
  $number_of_fields = count($node_fields);
  $children_nodes_to_process = array_keys($node_fields);
  // we loop through the fields looking for a paragraph type to expand and rewrite
  for ($i = 0; $i < $number_of_fields; $i++) {
    $info = field_info_field($children_nodes_to_process[$i]);
    $type = $info['type'];
    if ($info['type'] == 'paragraphs') {
      // the outer node type is a 'field_paragraph_multiple_choice', so save this name for later pre-manifest creation.
      $save_field_name = $children_nodes_to_process[$i];
      $namevalue = '[ { ';
      // if we have a paragraphs type, use a wrapper for easier reference
      $paragraphs = $wrapper->language($language)->$info['field_name']->value();
      // Ensure paragraphs variable is an array.
      $paragraphs = is_array($paragraphs) ? $paragraphs : array($paragraphs);
      $match_possibilites = array('field_priority_image', 'field_priority_text');
      $drag_possibilities = array('field_left_drag_image', 'field_left_drag_text', 'field_right_drag_image', 'field_right_drag_text');
      $drag_select_possibilities = array('field_drag_select_image', 'field_drag_select_text', 'field_correct_answer');
      $list_possibilities = array('field_list_image', 'field_list_video', 'field_list_text');
      $reveal_possibilities = array('field_reveal_thumbnail', 'field_reveal_hero', 'field_reveal_hero_video', 'field_reveal_text');
      $flashcard_possibilities = array('field_front_card_image', 'field_front_card', 'field_back_card_image', 'field_back_card');
      $matchgame_possibilities = array('field_top_match_text', 'field_top_match_image', 'field_middle_match_text', 'field_middle_match_image', 'field_bottom_match_text', 'field_bottom_match_image');
      // explore each paragraph
      foreach ($paragraphs as $paragraph) {
        // Using the paragraph's bundle type, we can get all the fields we
        // need to account for in our data.
        $paragraph_fields = field_info_instances('paragraphs_item', $paragraph->bundle);
        $number_of_paragraph_fields = count($paragraph_fields);
        $children_fields_to_process = element_children($paragraph_fields);
        // and every field for each paragraph
        for ($pf = 0; $pf < $number_of_paragraph_fields; $pf++) {
          $field_name = $children_fields_to_process[$pf];
          $field_child_info = field_info_field($children_fields_to_process[$pf]);
          $name = $field_child_info['field_name'];
          $info = field_info_field($name);
          // todo: this should be collapsed and refactored once we're sure we don't need to process each type separately
          if (in_array($name, $match_possibilites)) {
            if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
              $namevalue .= '"' . $field_name . '" ~ "';
              if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
              }
              elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
              }
              $namevalue .= '",';
            }
          } else {
            if (in_array($name, $matchgame_possibilities)) {
              if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                $namevalue .= '"' . $field_name . '" ~ "';
                if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                  $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                }
                elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                  $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
                }
                $namevalue .= '",';
              }
            } else {
              // we only care about the value cards, since images are not used
              if (in_array($name, $flashcard_possibilities)) {
                if (isset($info['columns']['value'])) {
                  $namevalue .= '"' . $field_name . '" ~ "';
                  if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                    $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                  }
                  $namevalue .= '",';
                }
              } else {
                if (in_array($name, $list_possibilities)) {
                  if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                    $namevalue .= '"' . $field_name . '" ~ "';
                    if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                      $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                    }
                    elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                      $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
                    }
                    $namevalue .= '",';
                  }
                } else {
                  if (in_array($name, $reveal_possibilities)) {
                    if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                      $namevalue .= '"' . $field_name . '" ~ "';
                      if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                        $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                      }
                      elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                        $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
                      }
                      $namevalue .= '",';
                    }
                  } else {
                    if (in_array($name, $drag_possibilities)) {
                      if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                        $namevalue .= '"' . $field_name . '" ~ "';
                        if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                          $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                        }
                        elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                          $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
                        }
                        $namevalue .= '",';
                      }
                    } else {
                      if (in_array($name, $drag_select_possibilities)) {
                        if (isset($info['columns']['value']) || isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                          $namevalue .= '"' . $field_name . '" ~ "';
                          if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                            $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                          }
                          elseif (isset($paragraph->{$name}[LANGUAGE_NONE][0]['uri'])) {
                            $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['uri'];
                          }
                          $namevalue .= '",';
                        }
                      } else {
                        if (strlen(strstr($name, 'field_hot_spot')) > 0) {
                          if (isset($info['columns']['value'])) {
                            $namevalue .= '"' . $field_name . '" ~ "';
                            if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                              $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                            }
                            $namevalue .= '",';
                          }
                        } else {
                          // the answer node itself has no value we can use, so don't include it
                          if ($name != 'field_paragraph_answer') {
                            $namevalue .= '"' . $field_name . '" ~ "';
                            if (isset($paragraph->{$name}[LANGUAGE_NONE][0]['value'])) {
                              $namevalue .= $paragraph->{$name}[LANGUAGE_NONE][0]['value'];
                            }
                            $namevalue .= '",';
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          // if there are no elements in the field don't process
          if (!empty($paragraph->{$name}) && !empty($paragraph->{$name}[LANGUAGE_NONE])) {
            $field_count = count($paragraph->{$name}[LANGUAGE_NONE]);
            if ($info['type'] == 'paragraphs') {
              foreach ($paragraph->{$name}[LANGUAGE_NONE] as $item) {
                $para_entity = paragraphs_item_load($item['value']);
                $para_inst = field_info_instances('paragraphs_item', $para_entity->bundle);
                foreach (element_children($para_inst) as $key => $value) {
                  // if the value for a field is set, we will output it (and skip blank fields)
                  if (isset($para_entity->{$value}[LANGUAGE_NONE][0]['value'])) {
                    $namevalue .= '"' . $value . '" ~ "' . $para_entity->{$value}[LANGUAGE_NONE][0]['value'] . '",';
                  }
                  $info = field_info_field($value);
                  if ($info['type'] == 'image') {
                    // rare, but you could attach an image to a question
                    $img_name = 'field_question_image';
                    $img_fid = $paragraph->{$img_name}[LANGUAGE_NONE][0]['fid'];
                    if ($img_fid) {
                      $file_id = file_load($img_fid);
                      $uri = $file_id->uri;
                      $pub_image = 'assets/' . str_replace('public://', '', $uri);
                      $already_there = strpos($namevalue,'field_question_image' );
                      if ( $already_there === false )
                      {
                        $namevalue .= '"' . $img_name . '" ~ "' . $pub_image . '",';
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      // remove the final ',' and add the final '} ]' to be syntax correct on the json
      $namevalue = trim($namevalue, ",") . '} ]';
      $pre_manifest[$save_field_name] = $namevalue;
      $manifest[] = $namevalue;
    } elseif ($info['type'] == 'entityreference') {
      // todo: think of a better way to process for entity references than to check the type for product
      if ($node->type == 'product_detail') {
        //dpm('found an entity reference node to fetch and process');
        //dpm($node->type);
        $objects = $wrapper->language($language)->$info['field_name']->value();
        //dpm('paragraphs');
        //dpm($objects);
        $num_entity_refs = count($wrapper->language($language)->$info['field_name']->value());
        $field_name = $info['field_name'];
        //dpm('found ' .  $num_entity_refs . ' entity references.');
        $csv = '';
        // here we load the triplets of info for title, image, and creation date
        for ($num = 0; $num < $num_entity_refs; $num++) {
          $targetid = $node->{$field_name}[$language][$num]['target_id'];
          //dpm($targetid);
          $csv = '';
          $partnerinfo = tng_title_image_date_extractor($targetid, $language);
          foreach ($partnerinfo as $key) {
            //dpm($key);
            $csv = $csv . $key . ',';
          }
        }
        $csv = rtrim($csv, ', ');
        $pre_manifest[$field_name] = $csv;

      } elseif ($node->type == 'content_object') {
        //dpm('found a content object entity reference, now loading manifests');
        $num_entity_refs = count($wrapper->language($language)->$info['field_name']->value());
        $field_name = $info['field_name'];
        //dpm('field_name : ' . $field_name);
        //dpm('found ' .  $num_entity_refs . ' entity references.');
        for ($num = 0; $num < $num_entity_refs; $num++) {
          $targetid = $node->{$field_name}[$language][$num]['target_id'];
          $learning_manifest = tng_manifest_extractor($targetid, $language);
          $pre_manifest[$field_name][$num] = $learning_manifest;
        }
      }
    } elseif ($info['type'] == 'image') {
      $field_name = $info['field_name'];
      $image_style = $node_fields[$field_name]['display']['default']['settings']['image_style'];
      $new_lang = $node->language;
      if (isset($node->{$field_name}[$new_lang][0]['fid'])) {
        $file_id = file_load($node->{$field_name}[$new_lang][0]['fid']);
        $uri = $file_id->uri;
        $style_path = image_style_url($image_style, $uri);
        $image_style_path = array($style_path);
      } else {
        $image_style_path = array('');
      }
      $pre_manifest[$field_name] = $image_style_path[0];
    } elseif ($info['type'] == 'text' || $info['type'] == 'text_long') {
      $wrap = '';
      $wrap_array = $wrapper->language($language)->$children_nodes_to_process[$i]->value();
      if (isset($wrap_array['value'])) {
        $wrap = $wrap_array['value'];
      } elseif (is_string($wrap_array)) {
        $wrap = $wrapper->language($language)->$children_nodes_to_process[$i]->value();
      }
      if ($node->type == 'product_detail') {
        $instance = field_info_instance('node', $info['field_name'], 'product_detail');
        $my_translated_label = i18n_field_translate_property($instance, 'label', $language);
        $translated_labels[$info['field_name']] = $my_translated_label;
      }
      $pre_manifest[$children_nodes_to_process[$i]] = $wrap;
    } elseif ($info['type'] == 'file') {
      $field_name = $info['field_name'];
      if (isset($node->{$field_name}[$language][0]['fid'])) {
        $file_id = file_load($node->{$field_name}[$language][0]['fid']);
        $uri = $file_id->uri;
        $thefilepath = file_create_url($uri);
        $pre_manifest[$field_name] = $thefilepath;
      } else {
        $pre_manifest[$field_name] = '';
      }
    } elseif ($info['type'] == 'number_integer') {
      $field_name = $info['field_name'];
      if ($node->{$field_name}[$language]) {
        $pre_manifest[$field_name] = $node->{$field_name}[$language][0]['value'];
      } else {
        $pre_manifest[$field_name] = '';
      }
    } elseif ($info['type'] == 'taxonomy_term_reference') {
      //dpm('found a taxonomy term reference');
      $field_name = $info['field_name'];
      if (isset($node->{$field_name}[$language])) {
        $number_of_terms = count($node->{$field_name}[$language]);
      }
      else {
        $number_of_terms = 0;
      }
      $collector = '';
      for ($t = 0; $t < $number_of_terms; $t++) {
        $tids = array($node->{$field_name}[$language][$t]['tid']);
        $terms = taxonomy_term_load_multiple($tids);
        foreach ($terms as $term) {
          $name = $term->name;
          $collector .= $name . ',';
        }
      }
      $pre_manifest[$field_name] = $collector;
    } elseif (($info['type'] == 'list_text')) {
      //dpm('found some list_text ');
      $field_name = $info['field_name'];
      if ($field_name == 'field_markets' && in_array(NODE_NOT_PUBLISHED, array($node->status, $node->translations->data[$language]['status']))) {
        // Hide unpublished nodes from all markets.
        $pre_manifest[$field_name] = array();
      }
      else {
        $pre_manifest[$field_name] = $wrapper->language($language)->$children_nodes_to_process[$i]->value();
      }
    } elseif (($info['type'] == 'list_boolean')) {
      $field_name = $info['field_name'];
      $bool = $wrapper->language($language)->$children_nodes_to_process[$i]->value();
      if ($bool == TRUE) {
        $bool = 1;
      } elseif ($bool == FALSE) {
        $bool = 0;
      }
      $pre_manifest[$field_name] = $bool;
    }
  }

  // whatever type of entity we discover while processing, handle each by the type it is

  if ($node->type == 'product_detail') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_product($pre_manifest, $translated_labels, $language, $local_tid);
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'content_object') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_content_object($pre_manifest, $language, $local_tid);
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'hot_spots') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_hotspot($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'drag_match') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_dragmatch($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'trivia') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_trivia($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'drag_select') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_dragselect($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'drag_priorities') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_dragmatch_prioritize($pre_manifest, $language, $local_tid['target_id']);
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'list') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_list($pre_manifest, $language, $local_tid, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'reveal') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_reveal($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'flash_cards') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_flashcards($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'matching_game') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_matchgame($pre_manifest, $language, $local_tid, $module_name, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'question_and_answer') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_question_and_answer($pre_manifest, $language, $local_tid, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'badge') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_badge($pre_manifest, $language, $local_tid);
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'story') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_story($pre_manifest, $language, $local_tid, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'diary') {
    if (isset($node->field_manifest[$language][0]['target_id'])) {
      $local_tid = $node->field_manifest[$language][0]['target_id'];
    }
    else {
      $local_tid = NULL;
    }
    $new_nid = process_diary($pre_manifest, $language, $local_tid, '0');
    if ($new_nid != $local_tid) {
      $node->field_manifest[$language][0]['target_id'] = $new_nid;
      field_attach_update('node', $node);
    }
  } elseif ($node->type == 'tools') {
    $node = tng_fix_tools($node);
  }
}

/*
 * Since tools don't have a manifest, they don't have the code that fixes file and images paths.
 *
 */
function tng_fix_tools($entity)
{
  $node_fields = field_info_instances('node', 'tools');

  // TODO:grab field names dynamically
  $field_names = array('field_tool_thumbnail', 'field_tool_pdf');

  foreach ($field_names as $field_name) {
    foreach ($entity->$field_name as $language => $field) {
      if (!isset($field[0]['uri'])) {
        if (isset($field[0]['fid'])) {
          $file = file_load($field[0]['fid']);
          $info = field_info_field($field_name);
          if ($info['type'] == 'image') {
            $image_style = $node_fields[$field_name]['display']['default']['settings']['image_style'];
            $path = image_style_path($image_style, $file->uri);
          }
          else {
            $path = $file->uri;
          }
          $file_mime = $file->filemime;
          $entity->{$field_name}[$language][0]['uri'] = $path;
          $entity->{$field_name}[$language][0]['filemime'] = $file_mime;
        }
      }
    }
  }

  return $entity;
}

function array_to_obj($array, &$obj)
{
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $obj->$key = new stdClass();
      array_to_obj($value, $obj->$key);
    } else {
      $obj->$key = $value;
    }
  }
  return $obj;
}

function arrayToObject($array)
{
  $object = new stdClass();
  return array_to_obj($array, $object);
}

function _wrapper_debug($w)
{
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

function _date_range_limit($start, $end, $adj, $a, $b, $result)
{
  if ($result[$a] < $start) {
    $result[$b] -= intval(($start - $result[$a] - 1) / $adj) + 1;
    $result[$a] += $adj * intval(($start - $result[$a] - 1) / $adj + 1);
  }

  if ($result[$a] >= $end) {
    $result[$b] += intval($result[$a] / $adj);
    $result[$a] -= $adj * intval($result[$a] / $adj);
  }

  return $result;
}

function _date_range_limit_days($base, $result)
{
  $days_in_month_leap = array(31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  $days_in_month = array(31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

  _date_range_limit(1, 13, 12, "m", "y", $base);

  $year = $base["y"];
  $month = $base["m"];

  if (!$result["invert"]) {
    while ($result["d"] < 0) {
      $month--;
      if ($month < 1) {
        $month += 12;
        $year--;
      }

      $leapyear = $year % 400 == 0 || ($year % 100 != 0 && $year % 4 == 0);
      $days = $leapyear ? $days_in_month_leap[$month] : $days_in_month[$month];

      $result["d"] += $days;
      $result["m"]--;
    }
  } else {
    while ($result["d"] < 0) {
      $leapyear = $year % 400 == 0 || ($year % 100 != 0 && $year % 4 == 0);
      $days = $leapyear ? $days_in_month_leap[$month] : $days_in_month[$month];

      $result["d"] += $days;
      $result["m"]--;

      $month++;
      if ($month > 12) {
        $month -= 12;
        $year++;
      }
    }
  }

  return $result;
}

function _date_normalize($base, $result)
{
  $result = _date_range_limit(0, 60, 60, "s", "i", $result);
  $result = _date_range_limit(0, 60, 60, "i", "h", $result);
  $result = _date_range_limit(0, 24, 24, "h", "d", $result);
  $result = _date_range_limit(0, 12, 12, "m", "y", $result);

  $result = _date_range_limit_days($base, $result);

  $result = _date_range_limit(0, 12, 12, "m", "y", $result);

  return $result;
}

/**
 * Accepts two unix timestamps.
 */
function _date_diff($one, $two)
{
  $invert = false;
  if ($one > $two) {
    list($one, $two) = array($two, $one);
    $invert = true;
  }

  $key = array("y", "m", "d", "h", "i", "s");
  $a = array_combine($key, array_map("intval", explode(" ", date("Y m d H i s", $one))));
  $b = array_combine($key, array_map("intval", explode(" ", date("Y m d H i s", $two))));

  $result = array();
  $result["y"] = $b["y"] - $a["y"];
  $result["m"] = $b["m"] - $a["m"];
  $result["d"] = $b["d"] - $a["d"];
  $result["h"] = $b["h"] - $a["h"];
  $result["i"] = $b["i"] - $a["i"];
  $result["s"] = $b["s"] - $a["s"];
  $result["invert"] = $invert ? 1 : 0;
  $result["days"] = intval(abs(($one - $two) / 86400));

  if ($invert) {
    _date_normalize($a, $result);
  } else {
    _date_normalize($b, $result);
  }

  return $result;
}

/**
 * Implements hook_field_delete().
 *
 * Remove object manifests when their parent node is deleted.
 */
function tng_shadow_node_delete($node) {
  if (!empty($node->field_manifest)) {
    foreach ($node->field_manifest as $items) {
      foreach ($items as $item) {
        drupal_register_shutdown_function('node_delete', $item['target_id']);
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function tng_shadow_cron() {
  $queue = DrupalQueue::get('tng_shadow_orphan_manifests');
  if ($queue->numberOfItems() == 0) {
    // Delete object manifests which are not attached to the current revision.
    $result = db_query("SELECT n.nid FROM node n LEFT JOIN field_data_field_manifest m ON n.nid = m.field_manifest_target_id WHERE n.type = 'object_manifest' AND m.field_manifest_target_id IS NULL");
    foreach ($result as $manifest) {
      $queue->createItem($manifest->nid);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function tng_shadow_cron_queue_info() {
  $queues['tng_shadow_orphan_manifests'] = array(
    'worker callback' => 'node_delete',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_data_learning_point_csv_delete().
 *
 * Remove deleted items from the learning_point_answers table.
 */
function tng_shadow_data_learning_point_csv_delete($entity) {
  db_delete('learning_point_answers')
    ->condition('csvid', $entity->csvid)
    ->execute();
}
